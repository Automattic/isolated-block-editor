{"version":3,"file":"index.js","names":["memoize","classnames","applyFormat","create","registerFormatType","__UNSTABLE_LINE_SEPARATOR","shouldUseWhiteText","FORMAT_NAME","applyCarets","record","multiline","carets","arguments","length","undefined","forEach","caret","_pop","_lastGrapheme$length","start","end","id","color","label","isCollapsed","isAtMultilineItemEnd","multilineItemText","checkOffset","isShifted","isMultiline","text","lastGrapheme","Intl","Segmenter","segment","pop","offset","type","attributes","class","title","style","join","getCarets","peers","richTextIdentifier","blockClientId","Object","entries","filter","_ref","_peer$start","_peer$end","peer","clientId","attributeKey","map","_ref2","name","getMultilineData","multilineTag","attributeValue","_create","_create$text","_create$text$split","multilineItems","html","split","call","count","itemText","getStableBlockAttributeSelector","getBlockAttributes","settings","tagName","className","edit","__experimentalGetPropsForEditableTreePreparation","select","_ref3","_MULTILINE_ATTRIBUTES","_MULTILINE_ATTRIBUTES2","MULTILINE_ATTRIBUTES","values","blockName","getBlockName","getCollabPeers","blockAttributeSelector","__experimentalCreatePrepareEditableTree","_ref4","formats","registerFormatCollabCaret"],"sources":["../../../../../../src/components/collaborative-editing/use-yjs/formats/collab-caret/index.js"],"sourcesContent":["/**\n * External dependencies\n */\nimport memoize from 'memize';\nimport classnames from 'classnames';\n\n/**\n * WordPress dependencies\n */\nimport { applyFormat, create, registerFormatType, __UNSTABLE_LINE_SEPARATOR } from '@wordpress/rich-text';\n\n/**\n * Internal dependencies\n */\nimport { shouldUseWhiteText } from './color-utils';\nimport './style.scss';\n\n/**\n * @typedef MultilineData\n * @property {boolean} isMultiline - Whether this is a multiline attribute.\n * @property {(offset: number) => {isAtMultilineItemEnd: boolean, multilineItemText?: string}} checkOffset - Determine whether a given caret index is at the end of a multiline segment.\n */\n\nexport const FORMAT_NAME = 'isolated/collab-caret';\n\n/**\n * Applies given carets to the given record.\n *\n * @param {Object} record The record to apply carets to.\n * @param {MultilineData} multiline\n * @param {Array} carets The carets to apply.\n * @return {Object} A record with the carets applied.\n */\nexport function applyCarets( record, multiline, carets = [] ) {\n\tcarets.forEach( ( caret ) => {\n\t\tlet { start, end, id, color, label } = caret;\n\t\tconst isCollapsed = start === end;\n\t\tconst { isAtMultilineItemEnd, multilineItemText } = multiline.checkOffset( end );\n\t\tconst isShifted = isCollapsed && ( multiline.isMultiline ? isAtMultilineItemEnd : end >= record.text.length );\n\n\t\tconst text = isAtMultilineItemEnd ? multilineItemText : record.text;\n\n\t\t// Try to accurately get the `length` of the last character (i.e. grapheme) in case\n\t\t// the last character is an emoji, where \"<emoji>\".length can be more than 1.\n\t\t// For example, \"👩‍👩‍👧‍👦\".length === 11. (Intl.Segementer is still unsupported in Firefox)\n\t\t// @ts-ignore Intl.Segmenter is not in spec yet\n\t\tconst lastGrapheme = Intl.Segmenter\n\t\t\t? // @ts-ignore Intl.Segmenter is not in spec yet\n\t\t\t  [ ...new Intl.Segmenter().segment( text ) ].pop()?.segment\n\t\t\t: undefined;\n\t\tconst offset = lastGrapheme?.length ?? 1; // fall back to 1 if we can't accurately segment the last grapheme\n\n\t\tif ( isShifted ) {\n\t\t\tstart = end - offset;\n\t\t}\n\n\t\tif ( isCollapsed ) {\n\t\t\tend = start + offset;\n\t\t}\n\n\t\trecord = applyFormat(\n\t\t\trecord,\n\t\t\t{\n\t\t\t\ttype: FORMAT_NAME,\n\t\t\t\tattributes: {\n\t\t\t\t\tid: 'iso-editor-collab-caret-' + id,\n\t\t\t\t\tclass: classnames( {\n\t\t\t\t\t\t'is-collapsed': isCollapsed,\n\t\t\t\t\t\t'is-shifted': isShifted,\n\t\t\t\t\t} ),\n\t\t\t\t\ttitle: label,\n\t\t\t\t\tstyle: [\n\t\t\t\t\t\t`--iso-editor-collab-caret-color: ${ color || '#2e3d48' };`,\n\t\t\t\t\t\t`--iso-editor-collab-caret-label-text-color: ${\n\t\t\t\t\t\t\tshouldUseWhiteText( color ) ? '#fff' : '#1e1e1e'\n\t\t\t\t\t\t};`,\n\t\t\t\t\t].join( ' ' ),\n\t\t\t\t},\n\t\t\t},\n\t\t\tstart,\n\t\t\tend\n\t\t);\n\t} );\n\n\treturn record;\n}\n\nconst getCarets = memoize( ( peers, richTextIdentifier, blockClientId ) => {\n\treturn Object.entries( peers )\n\t\t.filter( ( [ , peer ] ) => {\n\t\t\treturn (\n\t\t\t\tpeer?.start?.clientId === blockClientId &&\n\t\t\t\tpeer?.end?.clientId === blockClientId &&\n\t\t\t\tpeer.start.attributeKey === richTextIdentifier\n\t\t\t);\n\t\t} )\n\t\t.map( ( [ id, peer ] ) => ( {\n\t\t\tid,\n\t\t\tlabel: peer.name,\n\t\t\tstart: peer.start.offset,\n\t\t\tend: peer.end.offset,\n\t\t\tcolor: peer.color,\n\t\t} ) );\n} );\n\n/**\n * @param {string} multilineTag\n * @param {string} attributeValue\n * @return {MultilineData}\n */\nconst getMultilineData = ( multilineTag, attributeValue ) => {\n\tconst multilineItems = multilineTag\n\t\t? create( { html: attributeValue, multilineTag } )?.text?.split?.( __UNSTABLE_LINE_SEPARATOR )\n\t\t: [];\n\n\treturn {\n\t\tisMultiline: !! multilineTag,\n\t\tcheckOffset: ( offset ) => {\n\t\t\tlet count = 0;\n\t\t\tfor ( const itemText of multilineItems ) {\n\t\t\t\tcount += itemText.length;\n\t\t\t\tif ( offset === count ) {\n\t\t\t\t\treturn { isAtMultilineItemEnd: true, multilineItemText: itemText };\n\t\t\t\t}\n\t\t\t\tcount += 1; // line separator character\n\t\t\t}\n\t\t\treturn { isAtMultilineItemEnd: false };\n\t\t},\n\t};\n};\n\nconst getStableBlockAttributeSelector = memoize( ( getBlockAttributes, blockClientId, attributeKey ) => () =>\n\tgetBlockAttributes( blockClientId )[ attributeKey ]\n);\n\nexport const settings = {\n\ttitle: 'Collaboration peer caret',\n\ttagName: 'mark',\n\tclassName: 'iso-editor-collab-caret',\n\tattributes: {\n\t\tid: 'id',\n\t\tclassName: 'class',\n\t},\n\tedit() {\n\t\treturn null;\n\t},\n\t__experimentalGetPropsForEditableTreePreparation( select, { richTextIdentifier, blockClientId } ) {\n\t\t// Adds special handling for certain block attributes that are known to be multiline,\n\t\t// e.g. the `values` attribute of the List block.\n\t\tconst MULTILINE_ATTRIBUTES = {\n\t\t\t'core/list': { values: { multilineTag: 'li' } },\n\t\t};\n\n\t\tconst blockName = select( 'core/block-editor' ).getBlockName( blockClientId );\n\t\tconst multilineTag = MULTILINE_ATTRIBUTES[ blockName ]?.[ richTextIdentifier ]?.multilineTag;\n\n\t\t// The properties in this return object need to be as stable as possible.\n\t\t// See https://github.com/WordPress/gutenberg/issues/23428\n\t\treturn {\n\t\t\tcarets: getCarets( select( 'isolated/editor' ).getCollabPeers(), richTextIdentifier, blockClientId ),\n\t\t\tmultilineTag,\n\t\t\tblockAttributeSelector: getStableBlockAttributeSelector(\n\t\t\t\tselect( 'core/block-editor' ).getBlockAttributes,\n\t\t\t\tblockClientId,\n\t\t\t\trichTextIdentifier\n\t\t\t),\n\t\t};\n\t},\n\t__experimentalCreatePrepareEditableTree( { carets, multilineTag, blockAttributeSelector } ) {\n\t\treturn ( formats, text ) => {\n\t\t\tif ( ! carets?.length ) {\n\t\t\t\treturn formats;\n\t\t\t}\n\n\t\t\tconst multiline = getMultilineData( multilineTag, blockAttributeSelector() );\n\t\t\tconst record = applyCarets( { formats, text }, multiline, carets );\n\n\t\t\treturn record.formats;\n\t\t};\n\t},\n};\n\nexport const registerFormatCollabCaret = () => {\n\tregisterFormatType( FORMAT_NAME, settings );\n};\n"],"mappings":"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"}