{"version":3,"file":"rich-text.js","names":["diff","isEqual","select","create","toHTMLString","__UNSTABLE_LINE_SEPARATOR","OBJECT_REPLACEMENT_CHARACTER","gutenFormatsToYFormats","formats","findIndexOfEqualFormat","needle","haystack","findIndex","f","visited","Array","length","fill","map","yFormats","forEach","formatsForChar","charIdx","fIdx","fLength","ci","foundIndex","push","format","namedGutenFormatToStandardTags","index","formatTypeRecord","getFormatType","type","tagName","attributes","remappedEntries","Object","entries","key","value","fromEntries","getInferredMultilineTag","html","trimmedHtml","trim","test","undefined","prepareReplacementsForTransaction","a","b","partitionReplacementTypes","arr","multilineWrapperReplacements","normalReplacements","r","isArray","na","nb","replacementsDiff","simpleDiffArray","applyHTMLDelta","htmlA","htmlB","richTextMap","richTextOpts","multilineTagA","multilineTagB","inferredMultilineTag","inferredMultilineWrapperTags","mergedRichTextOpts","multilineTag","multilineWrapperTags","set","stringDiff","simpleDiffString","text","previousCharFormats","nullifierFormat","reduce","acc","replacements","doc","transact","get","delete","remove","insert","yfa","yfb","formatsDiff","slice","keys","richTextMapToHTML","toString","stringAsMultiline","replacement","replacementHTML","replace","getMultilineWrapperTagHTMLReplacements","str","replacementsHTML","currentMultilineWrappers","foundLineSeparatorIndex","indexOf","multilineWrappers","d","reverse","multilineWrapper","isOpeningTag","wrapperTagReplacements","split","line","i","join"],"sources":["../../../../../src/components/collaborative-editing/use-yjs/algorithms/rich-text.js"],"sourcesContent":["/**\n * External dependencies\n */\nimport * as diff from 'lib0/diff';\nimport { isEqual } from 'lodash';\n\n/** @typedef {import(\"yjs\").XmlText} Y.XmlText */\n\n/**\n * WordPress dependencies\n */\nimport { select } from '@wordpress/data';\nimport { create, toHTMLString, __UNSTABLE_LINE_SEPARATOR } from '@wordpress/rich-text';\n\nconst OBJECT_REPLACEMENT_CHARACTER = '\\ufffc'; // defined in @wordpress/rich-text special-characters\n\n/**\n * Convert an array of Gutenberg RichText formats to an array of range-based Y.Text formats.\n *\n * @param {Object[]} formats\n * @return {Object[]} Y.Text formats\n */\nexport function gutenFormatsToYFormats( formats ) {\n\tconst findIndexOfEqualFormat = ( needle, haystack = [] ) => haystack.findIndex( ( f ) => needle === f );\n\tconst visited = Array( formats.length )\n\t\t.fill( null )\n\t\t.map( () => ( {} ) );\n\tconst yFormats = [];\n\n\tformats.forEach( ( formatsForChar, charIdx ) => {\n\t\tformatsForChar.forEach( ( f, fIdx ) => {\n\t\t\tif ( visited[ charIdx ][ fIdx ] ) return;\n\n\t\t\tlet fLength = 1;\n\n\t\t\tfor ( let ci = charIdx + 1; ci < formats.length; ci++ ) {\n\t\t\t\tconst foundIndex = findIndexOfEqualFormat( f, formats[ ci ] );\n\t\t\t\tif ( foundIndex === -1 ) break;\n\n\t\t\t\tvisited[ ci ][ foundIndex ] = true;\n\t\t\t\tfLength++;\n\t\t\t}\n\n\t\t\tyFormats.push( {\n\t\t\t\tformat: namedGutenFormatToStandardTags( f ),\n\t\t\t\tindex: charIdx,\n\t\t\t\tlength: fLength,\n\t\t\t} );\n\t\t} );\n\t} );\n\n\treturn yFormats;\n}\n\n/**\n * Converts registered formats back to their standard tag/attribute names.\n *\n * For example, `core/bold` will be converted back to `strong`.\n *\n * @param format\n */\nexport function namedGutenFormatToStandardTags( format ) {\n\tconst formatTypeRecord = select( 'core/rich-text' ).getFormatType( format.type );\n\tif ( ! formatTypeRecord ) return { [ format.type ]: true };\n\n\tconst { tagName, attributes = {} } = formatTypeRecord;\n\tif ( ! format.attributes ) return { [ tagName ]: true };\n\n\tconst remappedEntries = Object.entries( format.attributes ).map( ( [ key, value ] ) => [\n\t\tattributes[ key ],\n\t\tvalue,\n\t] );\n\treturn { [ tagName ]: Object.fromEntries( remappedEntries ) };\n}\n\n// TODO: Unsolved problem\n// This is an imperfect inferral, so ideally we want to get this information\n// from Gutenberg's internal representation of the RichText.\nfunction getInferredMultilineTag( html ) {\n\tconst trimmedHtml = html.trim();\n\tif ( /^<li>/.test( trimmedHtml ) ) return 'li';\n\tif ( /^<p>/.test( trimmedHtml ) ) return 'p';\n\treturn undefined;\n}\n\n/**\n * Massage the Gutenberg replacements into Yjs-friendly structures.\n *\n * @param {Array} a The `replacements` array of a Gutenberg RichText.\n * @param {Array} b The `replacements` array of another Gutenberg RichText.\n */\nfunction prepareReplacementsForTransaction( a, b ) {\n\tconst partitionReplacementTypes = ( arr ) => {\n\t\tconst multilineWrapperReplacements = {};\n\t\tconst normalReplacements = [];\n\n\t\tarr.forEach( ( r, index ) => {\n\t\t\tif ( Array.isArray( r ) ) {\n\t\t\t\t// If it's an array, it's a multiline wrapper tag (e.g. ul/ol) and not a normal replacement.\n\t\t\t\tmultilineWrapperReplacements[ index ] = r;\n\t\t\t} else if ( r ) {\n\t\t\t\t// Since normal replacements do not rely on an index-based mapping\n\t\t\t\t// with the full text, let's condense the sparse array.\n\t\t\t\tnormalReplacements.push( r );\n\t\t\t}\n\t\t} );\n\t\treturn { multilineWrapperReplacements, normalReplacements };\n\t};\n\n\tconst { normalReplacements: na } = partitionReplacementTypes( a );\n\tconst { multilineWrapperReplacements, normalReplacements: nb } = partitionReplacementTypes( b );\n\n\treturn { multilineWrapperReplacements, replacementsDiff: diff.simpleDiffArray( na, nb ) };\n}\n\n/**\n * Apply the delta between two HTML strings to a Y.XmlText.\n *\n * @param {string} htmlA\n * @param {string} htmlB\n * @param {import(\"yjs\").Map} richTextMap\n * @param {Object} [richTextOpts] Optional options object to pass @wordpress/rich-text create().\n */\nexport function applyHTMLDelta( htmlA, htmlB, richTextMap, richTextOpts = {} ) {\n\tconst [ multilineTagA, multilineTagB ] = [ htmlA, htmlB ].map( getInferredMultilineTag );\n\tconst inferredMultilineTag = multilineTagA || multilineTagB;\n\tconst inferredMultilineWrapperTags = inferredMultilineTag === 'li' ? [ 'ul', 'ol' ] : [];\n\tconst mergedRichTextOpts = {\n\t\t...( inferredMultilineTag ? { multilineTag: inferredMultilineTag } : {} ),\n\t\tmultilineWrapperTags: inferredMultilineWrapperTags,\n\t\t...richTextOpts,\n\t};\n\n\trichTextMap.set( 'multilineTag', inferredMultilineTag );\n\n\tconst a = create( { ...mergedRichTextOpts, html: htmlA } );\n\tconst b = create( { ...mergedRichTextOpts, html: htmlB } );\n\n\tconst stringDiff = diff.simpleDiffString( a.text, b.text );\n\n\t// By default, a Yjs string insertion will inherit the formats of the previous character.\n\t// We need to prevent this by inserting with an explicit format object nullifying the previous formats.\n\tconst previousCharFormats = b.formats[ stringDiff.index - 1 ];\n\tconst nullifierFormat = previousCharFormats?.reduce(\n\t\t( acc, { type } ) => ( {\n\t\t\t...acc,\n\t\t\t[ type ]: null,\n\t\t} ),\n\t\t{}\n\t);\n\n\tconst { multilineWrapperReplacements, replacementsDiff } = prepareReplacementsForTransaction(\n\t\ta.replacements,\n\t\tb.replacements\n\t);\n\n\trichTextMap.doc?.transact( () => {\n\t\trichTextMap.get( 'xmlText' ).delete( stringDiff.index, stringDiff.remove );\n\t\trichTextMap.get( 'xmlText' ).insert( stringDiff.index, stringDiff.insert, nullifierFormat );\n\n\t\tconst yfa = gutenFormatsToYFormats( a.formats );\n\t\tconst yfb = gutenFormatsToYFormats( b.formats );\n\t\tconst formatsDiff = diff.simpleDiffArray( yfa, yfb, isEqual );\n\n\t\tif ( formatsDiff.remove ) {\n\t\t\tyfa.slice( formatsDiff.index, formatsDiff.index + formatsDiff.remove ).forEach( ( f ) => {\n\t\t\t\tconst tagName = Object.keys( f.format )[ 0 ];\n\t\t\t\trichTextMap.get( 'xmlText' ).format( f.index, f.length, { [ tagName ]: null } );\n\t\t\t} );\n\t\t}\n\t\tif ( formatsDiff.insert ) {\n\t\t\tformatsDiff.insert.forEach( ( f ) => richTextMap.get( 'xmlText' ).format( f.index, f.length, f.format ) );\n\t\t}\n\n\t\trichTextMap.get( 'replacements' ).delete( replacementsDiff.index, replacementsDiff.remove );\n\t\trichTextMap.get( 'replacements' ).insert( replacementsDiff.index, replacementsDiff.insert );\n\t\trichTextMap.set( 'multilineWrapperReplacements', multilineWrapperReplacements );\n\t} );\n}\n\n/**\n * Convert the RichText back from our Yjs representation to an HTML string.\n *\n * @param {import(\"yjs\").Map} richTextMap\n * @return {string}\n */\nexport function richTextMapToHTML( richTextMap ) {\n\tlet text = richTextMap.get( 'xmlText' ).toString();\n\n\t// Process multiline tags\n\tconst multilineTag = richTextMap.get( 'multilineTag' );\n\ttext = multilineTag\n\t\t? stringAsMultiline( text, multilineTag, richTextMap.get( 'multilineWrapperReplacements' ) )\n\t\t: text;\n\n\t// Process replacements (e.g. inline images)\n\trichTextMap.get( 'replacements' ).forEach( ( replacement ) => {\n\t\tconst replacementHTML = toHTMLString( {\n\t\t\tvalue: {\n\t\t\t\treplacements: [ replacement ],\n\t\t\t\tformats: Array( 1 ),\n\t\t\t\ttext: OBJECT_REPLACEMENT_CHARACTER,\n\t\t\t},\n\t\t} );\n\t\ttext = text.replace( OBJECT_REPLACEMENT_CHARACTER, replacementHTML );\n\t} );\n\n\treturn text;\n}\n\n/**\n * Get HTML replacements for each multiline wrapper tag replacement.\n *\n * @param {string} str\n * @param {Record<number, {type: string}[]>} replacements\n */\nfunction getMultilineWrapperTagHTMLReplacements( str, replacements ) {\n\tconst replacementsHTML = [];\n\tlet currentMultilineWrappers = [];\n\tlet foundLineSeparatorIndex = -1;\n\n\tdo {\n\t\tfoundLineSeparatorIndex = str.indexOf( __UNSTABLE_LINE_SEPARATOR, foundLineSeparatorIndex + 1 );\n\t\tconst multilineWrappers = replacements[ foundLineSeparatorIndex ] ?? [];\n\t\tconst d = diff.simpleDiffArray( currentMultilineWrappers, multilineWrappers, isEqual );\n\t\tlet html = '';\n\n\t\t// Closing multiline wrapper tags\n\t\tcurrentMultilineWrappers\n\t\t\t.slice( d.index, d.index + d.remove )\n\t\t\t.reverse()\n\t\t\t.forEach( ( multilineWrapper ) => {\n\t\t\t\thtml += `</${ multilineWrapper.type }></li>`;\n\t\t\t} );\n\n\t\t// Opening multiline wrapper tags\n\t\td.insert.forEach( ( multilineWrapper ) => {\n\t\t\thtml += `<${ multilineWrapper.type }>`;\n\t\t} );\n\n\t\treplacementsHTML.push( { isOpeningTag: !! d.insert.length, html } );\n\t\tcurrentMultilineWrappers = multilineWrappers;\n\t} while ( foundLineSeparatorIndex !== -1 );\n\n\treturn replacementsHTML;\n}\n\n/**\n * Wraps each line of a multiline string with the given tags.\n *\n * @param {string} str A multiline string delimited by __UNSTABLE_LINE_SEPARATOR.\n * @param {string} multilineTag The tag name to wrap each line with.\n * @param {Record<number, {type: string}[]>} replacements Multiline wrapper replacements.\n * @return {string} The string reconstructed with multiline considerations.\n */\nfunction stringAsMultiline( str, multilineTag, replacements ) {\n\tconst wrapperTagReplacements = getMultilineWrapperTagHTMLReplacements( str, replacements );\n\n\treturn str\n\t\t.split( __UNSTABLE_LINE_SEPARATOR )\n\t\t.map( ( line, i ) => {\n\t\t\tconst { isOpeningTag, html } = wrapperTagReplacements[ i ];\n\n\t\t\treturn isOpeningTag\n\t\t\t\t? `<${ multilineTag }>${ line }${ html }`\n\t\t\t\t: `<${ multilineTag }>${ line }</${ multilineTag }>${ html }`;\n\t\t} )\n\t\t.join( '' );\n}\n"],"mappings":"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"}