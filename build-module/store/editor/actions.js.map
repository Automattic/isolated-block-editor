{"version":3,"sources":["../../../src/store/editor/actions.js"],"names":["controls","store","interfaceStore","actions","setReady","isReady","type","setEditorMode","editorMode","setupEditor","settings","setCurrentPattern","pattern","setIsInserterOpened","isOpen","setDeviceType","deviceType","setEditing","isEditing","openGeneralSidebar","name","dispatch","closeGeneralSidebar","setIsListViewOpened"],"mappings":"AAAA;AACA;AACA;AAEA,SAASA,QAAT,QAAyB,iBAAzB;AACA,SAASC,KAAK,IAAIC,cAAlB,QAAwC,sBAAxC;AAEA;;AACA;;AAEA,MAAMC,OAAO,GAAG;AACf;AACD;AACA;AACA;AACCC,EAAAA,QAAQ,CAAEC,OAAF,EAAY;AACnB,WAAO;AACNC,MAAAA,IAAI,EAAE,kBADA;AAEND,MAAAA;AAFM,KAAP;AAIA,GAVc;;AAWf;AACD;AACA;AACA;AACCE,EAAAA,aAAa,CAAEC,UAAF,EAAe;AAC3B,WAAO;AACNF,MAAAA,IAAI,EAAE,iBADA;AAENE,MAAAA;AAFM,KAAP;AAIA,GApBc;;AAqBf;AACD;AACA;AACA;AACCC,EAAAA,WAAW,CAAEC,QAAF,EAAa;AACvB,WAAO;AACNJ,MAAAA,IAAI,EAAE,cADA;AAENI,MAAAA;AAFM,KAAP;AAIA,GA9Bc;;AA+Bf;AACD;AACA;AACA;AACCC,EAAAA,iBAAiB,CAAEC,OAAF,EAAY;AAC5B,WAAO;AACNN,MAAAA,IAAI,EAAE,qBADA;AAENM,MAAAA;AAFM,KAAP;AAIA,GAxCc;;AAyCf;AACD;AACA;AACA;AACCC,EAAAA,mBAAmB,CAAEC,MAAF,EAAW;AAC7B,WAAO;AACNR,MAAAA,IAAI,EAAE,mBADA;AAENQ,MAAAA;AAFM,KAAP;AAIA,GAlDc;;AAmDf;AACD;AACA;AACA;AACCC,EAAAA,aAAa,CAAEC,UAAF,EAAe;AAC3B,WAAO;AACNV,MAAAA,IAAI,EAAE,iBADA;AAENU,MAAAA;AAFM,KAAP;AAIA,GA5Dc;;AA6Df;AACD;AACA;AACA;AACCC,EAAAA,UAAU,CAAEC,SAAF,EAAc;AACvB,WAAO;AACNZ,MAAAA,IAAI,EAAE,aADA;AAENY,MAAAA;AAFM,KAAP;AAIA,GAtEc;;AAuEf;AACD;AACA;AACA;AACC,GAACC,kBAAD,CAAqBC,IAArB,EAA4B;AAC3B,UAAMpB,QAAQ,CAACqB,QAAT,CAAmBnB,cAAnB,EAAmC,yBAAnC,EAA8D,iBAA9D,EAAiFkB,IAAjF,CAAN;AACA,GA7Ec;;AA8Ef;AACD;AACA;AACC,GAACE,mBAAD,GAAuB;AACtB,UAAMtB,QAAQ,CAACqB,QAAT,CAAmBnB,cAAnB,EAAmC,0BAAnC,EAA+D,iBAA/D,CAAN;AACA,GAnFc;;AAoFf;AACD;AACA;AACA;AACCqB,EAAAA,mBAAmB,CAAET,MAAF,EAAW;AAC7B,WAAO;AACNR,MAAAA,IAAI,EAAE,mBADA;AAENQ,MAAAA;AAFM,KAAP;AAIA;;AA7Fc,CAAhB;AAgGA,eAAeX,OAAf","sourcesContent":["/**\n * WordPress dependencies\n */\n\nimport { controls } from '@wordpress/data';\nimport { store as interfaceStore } from '@wordpress/interface';\n\n/** @typedef {import('../../index').BlockEditorSettings} BlockEditorSettings */\n/** @typedef {import('./reducer').EditorMode} EditorMode */\n\nconst actions = {\n\t/**\n\t * Set whether the editor is ready for editing\n\t * @param {boolean} isReady\n\t */\n\tsetReady( isReady ) {\n\t\treturn {\n\t\t\ttype: 'SET_EDITOR_READY',\n\t\t\tisReady,\n\t\t};\n\t},\n\t/**\n\t * Set the current editor mode\n\t * @param {EditorMode} editorMode Editor mode\n\t */\n\tsetEditorMode( editorMode ) {\n\t\treturn {\n\t\t\ttype: 'SET_EDITOR_MODE',\n\t\t\teditorMode,\n\t\t};\n\t},\n\t/**\n\t * Set up the editor\n\t * @param {BlockEditorSettings} settings\n\t */\n\tsetupEditor( settings ) {\n\t\treturn {\n\t\t\ttype: 'SETUP_EDITOR',\n\t\t\tsettings,\n\t\t};\n\t},\n\t/**\n\t * Set the current pattern name\n\t * @param {string} pattern Pattern name\n\t */\n\tsetCurrentPattern( pattern ) {\n\t\treturn {\n\t\t\ttype: 'SET_CURRENT_PATTERN',\n\t\t\tpattern,\n\t\t};\n\t},\n\t/**\n\t * Mark the block inserter as open or closed\n\t * @param {boolean} name\n\t */\n\tsetIsInserterOpened( isOpen ) {\n\t\treturn {\n\t\t\ttype: 'SET_INSERTER_OPEN',\n\t\t\tisOpen,\n\t\t};\n\t},\n\t/**\n\t * Set the current device type\n\t * @param {string} deviceType 'Mobile', 'Desktop', or 'Tablet'\n\t */\n\tsetDeviceType( deviceType ) {\n\t\treturn {\n\t\t\ttype: 'SET_DEVICE_TYPE',\n\t\t\tdeviceType,\n\t\t};\n\t},\n\t/**\n\t * Mark this editor as in-use or not\n\t * @param {boolean} isEditing\n\t */\n\tsetEditing( isEditing ) {\n\t\treturn {\n\t\t\ttype: 'SET_EDITING',\n\t\t\tisEditing,\n\t\t};\n\t},\n\t/**\n\t * Open the named sidebar\n\t * @param {string} name Name of sidebar section\n\t */\n\t*openGeneralSidebar( name ) {\n\t\tyield controls.dispatch( interfaceStore, 'enableComplementaryArea', 'isolated/editor', name );\n\t},\n\t/**\n\t * Close the sidebar (or popover)\n\t */\n\t*closeGeneralSidebar() {\n\t\tyield controls.dispatch( interfaceStore, 'disableComplementaryArea', 'isolated/editor' );\n\t},\n\t/**\n\t * Set the status of the listview sidebar section\n\t * @param {boolean} isOpen\n\t */\n\tsetIsListViewOpened( isOpen ) {\n\t\treturn {\n\t\t\ttype: 'SET_LISTVIEW_OPEN',\n\t\t\tisOpen,\n\t\t};\n\t},\n};\n\nexport default actions;\n"],"file":"actions.js"}