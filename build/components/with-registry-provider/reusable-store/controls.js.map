{"version":3,"file":"controls.js","names":["_blocks","require","_data","_i18n","convertBlockToStatic","clientId","type","convertBlocksToReusable","clientIds","deleteReusableBlock","id","controls","CONVERT_BLOCK_TO_STATIC","createRegistryControl","registry","_ref","oldBlock","select","getBlock","reusableBlock","getEditedEntityRecord","attributes","ref","newBlocks","parse","content","dispatch","replaceBlocks","CONVERT_BLOCKS_TO_REUSABLE","_ref3","_asyncToGenerator2","_regenerator","mark","_callee","_ref2","updatedRecord","newBlock","wrap","_callee$","_context","prev","next","title","__","serialize","getBlocksByClientId","status","saveEntityRecord","sent","createBlock","reusableBlocksStore","__experimentalSetEditingReusableBlock","stop","_x","apply","arguments","DELETE_REUSABLE_BLOCK","_ref5","_callee2","_ref4","allBlocks","associatedBlocks","associatedBlockClientIds","_callee2$","_context2","abrupt","getBlocks","filter","block","isReusableBlock","map","length","removeBlocks","deleteEntityRecord","_x2","_default","exports"],"sources":["../../../../src/components/with-registry-provider/reusable-store/controls.js"],"sourcesContent":["/**\n * WordPress dependencies\n */\nimport { isReusableBlock, createBlock, parse, serialize } from '@wordpress/blocks';\nimport { createRegistryControl } from '@wordpress/data';\nimport { __ } from '@wordpress/i18n';\n\n/**\n * Convert a reusable block to a static block effect handler\n *\n * @param {string}  clientId Block ID.\n * @return {Object} control descriptor.\n */\nexport function convertBlockToStatic( clientId ) {\n\treturn {\n\t\ttype: 'CONVERT_BLOCK_TO_STATIC',\n\t\tclientId,\n\t};\n}\n\n/**\n * Convert a static block to a reusable block effect handler\n *\n * @param {Array}  clientIds Block IDs.\n * @return {Object} control descriptor.\n */\nexport function convertBlocksToReusable( clientIds ) {\n\treturn {\n\t\ttype: 'CONVERT_BLOCKS_TO_REUSABLE',\n\t\tclientIds,\n\t};\n}\n\n/**\n * Deletes a reusable block.\n *\n * @param {string} id Reusable block ID.\n * @return {Object} control descriptor.\n */\nexport function deleteReusableBlock( id ) {\n\treturn {\n\t\ttype: 'DELETE_REUSABLE_BLOCK',\n\t\tid,\n\t};\n}\n\nconst controls = {\n\tCONVERT_BLOCK_TO_STATIC: createRegistryControl( ( registry ) => ( { clientId } ) => {\n\t\tconst oldBlock = registry.select( 'core/block-editor' ).getBlock( clientId );\n\t\tconst reusableBlock = registry\n\t\t\t.select( 'core' )\n\t\t\t.getEditedEntityRecord( 'postType', 'wp_block', oldBlock.attributes.ref );\n\n\t\tconst newBlocks = parse( reusableBlock.content );\n\t\tregistry.dispatch( 'core/block-editor' ).replaceBlocks( oldBlock.clientId, newBlocks );\n\t} ),\n\n\tCONVERT_BLOCKS_TO_REUSABLE: createRegistryControl(\n\t\t( registry ) =>\n\t\t\tasync function ( { clientIds } ) {\n\t\t\t\tconst reusableBlock = {\n\t\t\t\t\ttitle: __( 'Untitled Reusable Block' ),\n\t\t\t\t\tcontent: serialize( registry.select( 'core/block-editor' ).getBlocksByClientId( clientIds ) ),\n\t\t\t\t\tstatus: 'publish',\n\t\t\t\t};\n\n\t\t\t\tconst updatedRecord = await registry\n\t\t\t\t\t.dispatch( 'core' )\n\t\t\t\t\t.saveEntityRecord( 'postType', 'wp_block', reusableBlock );\n\n\t\t\t\tconst newBlock = createBlock( 'core/block', {\n\t\t\t\t\tref: updatedRecord.id,\n\t\t\t\t} );\n\t\t\t\tregistry.dispatch( 'core/block-editor' ).replaceBlocks( clientIds, newBlock );\n\t\t\t\tregistry\n\t\t\t\t\t// @ts-ignore */}\n\t\t\t\t\t.dispatch( reusableBlocksStore )\n\t\t\t\t\t.__experimentalSetEditingReusableBlock( newBlock.clientId, true );\n\t\t\t}\n\t),\n\n\tDELETE_REUSABLE_BLOCK: createRegistryControl(\n\t\t( registry ) =>\n\t\t\tasync function ( { id } ) {\n\t\t\t\tconst reusableBlock = registry.select( 'core' ).getEditedEntityRecord( 'postType', 'wp_block', id );\n\n\t\t\t\t// Don't allow a reusable block with a temporary ID to be deleted\n\t\t\t\tif ( ! reusableBlock ) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\t// Remove any other blocks that reference this reusable block\n\t\t\t\tconst allBlocks = registry.select( 'core/block-editor' ).getBlocks();\n\t\t\t\tconst associatedBlocks = allBlocks.filter(\n\t\t\t\t\t( block ) => isReusableBlock( block ) && block.attributes.ref === id\n\t\t\t\t);\n\t\t\t\tconst associatedBlockClientIds = associatedBlocks.map( ( block ) => block.clientId );\n\n\t\t\t\t// Remove the parsed block.\n\t\t\t\tif ( associatedBlockClientIds.length ) {\n\t\t\t\t\tregistry.dispatch( 'core/block-editor' ).removeBlocks( associatedBlockClientIds );\n\t\t\t\t}\n\n\t\t\t\tawait registry.dispatch( 'core' ).deleteEntityRecord( 'postType', 'wp_block', id );\n\t\t\t}\n\t),\n};\n\nexport default controls;\n"],"mappings":"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"}