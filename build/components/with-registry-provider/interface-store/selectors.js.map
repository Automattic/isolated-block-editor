{"version":3,"file":"selectors.js","names":["getActiveComplementaryArea","createRegistrySelector","select","state","scope","isComplementaryAreaVisible","preferencesStore","get","undefined","complementaryAreas","isItemPinned","item","pinnedItems","isFeatureActive","featureName","deprecated","since","alternative"],"sources":["../../../../src/components/with-registry-provider/interface-store/selectors.js"],"sourcesContent":["/**\n * WordPress dependencies\n */\nimport { createRegistrySelector } from '@wordpress/data';\nimport deprecated from '@wordpress/deprecated';\nimport { store as preferencesStore } from '@wordpress/preferences';\n\n/**\n * Returns the complementary area that is active in a given scope.\n *\n * @param {Object} state Global application state.\n * @param {string} scope Item scope.\n *\n * @return {string | null | undefined} The complementary area that is active in the given scope.\n */\nexport const getActiveComplementaryArea = createRegistrySelector(\n\t( select ) => ( state, scope ) => {\n\t\tconst isComplementaryAreaVisible = select( preferencesStore ).get(\n\t\t\tscope,\n\t\t\t'isComplementaryAreaVisible'\n\t\t);\n\n\t\t// Return `undefined` to indicate that the user has never toggled\n\t\t// visibility, this is the vanilla default. Other code relies on this\n\t\t// nuance in the return value.\n\t\tif ( isComplementaryAreaVisible === undefined ) {\n\t\t\treturn undefined;\n\t\t}\n\n\t\t// Return `null` to indicate the user hid the complementary area.\n\t\tif ( !isComplementaryAreaVisible ) {\n\t\t\treturn null;\n\t\t}\n\n\t\treturn state?.complementaryAreas?.[ scope ];\n\t}\n);\n\n/**\n * Returns a boolean indicating if an item is pinned or not.\n *\n * @param {Object} state Global application state.\n * @param {string} scope Scope.\n * @param {string} item  Item to check.\n *\n * @return {boolean} True if the item is pinned and false otherwise.\n */\nexport const isItemPinned = createRegistrySelector(\n\t( select ) => ( state, scope, item ) => {\n\t\tconst pinnedItems = select( preferencesStore ).get(\n\t\t\tscope,\n\t\t\t'pinnedItems'\n\t\t);\n\t\treturn pinnedItems?.[ item ] ?? true;\n\t}\n);\n\n/**\n * Returns a boolean indicating whether a feature is active for a particular\n * scope.\n *\n * @param {Object} state       The store state.\n * @param {string} scope       The scope of the feature (e.g. core/edit-post).\n * @param {string} featureName The name of the feature.\n *\n * @return {boolean} Is the feature enabled?\n */\nexport const isFeatureActive = createRegistrySelector(\n\t( select ) => ( state, scope, featureName ) => {\n\t\tdeprecated(\n\t\t\t`select( 'core/interface' ).isFeatureActive( scope, featureName )`,\n\t\t\t{\n\t\t\t\tsince: '6.0',\n\t\t\t\talternative: `select( 'core/preferences' ).get( scope, featureName )`,\n\t\t\t}\n\t\t);\n\n\t\treturn !!select( preferencesStore ).get( scope, featureName );\n\t}\n);\n"],"mappings":";;;;;;;AAGA;AACA;AACA;AALA;AACA;AACA;;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO,IAAMA,0BAA0B,GAAG,IAAAC,4BAAsB,EAC/D,UAAEC,MAAM;EAAA,OAAM,UAAEC,KAAK,EAAEC,KAAK,EAAM;IAAA;IACjC,IAAMC,0BAA0B,GAAGH,MAAM,CAAEI,kBAAgB,CAAE,CAACC,GAAG,CAChEH,KAAK,EACL,4BAA4B,CAC5B;;IAED;IACA;IACA;IACA,IAAKC,0BAA0B,KAAKG,SAAS,EAAG;MAC/C,OAAOA,SAAS;IACjB;;IAEA;IACA,IAAK,CAACH,0BAA0B,EAAG;MAClC,OAAO,IAAI;IACZ;IAEA,OAAOF,KAAK,aAALA,KAAK,gDAALA,KAAK,CAAEM,kBAAkB,0DAAzB,sBAA6BL,KAAK,CAAE;EAC5C,CAAC;AAAA,EACD;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AARA;AASO,IAAMM,YAAY,GAAG,IAAAT,4BAAsB,EACjD,UAAEC,MAAM;EAAA,OAAM,UAAEC,KAAK,EAAEC,KAAK,EAAEO,IAAI,EAAM;IAAA;IACvC,IAAMC,WAAW,GAAGV,MAAM,CAAEI,kBAAgB,CAAE,CAACC,GAAG,CACjDH,KAAK,EACL,aAAa,CACb;IACD,4BAAOQ,WAAW,aAAXA,WAAW,uBAAXA,WAAW,CAAID,IAAI,CAAE,iEAAI,IAAI;EACrC,CAAC;AAAA,EACD;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AATA;AAUO,IAAME,eAAe,GAAG,IAAAZ,4BAAsB,EACpD,UAAEC,MAAM;EAAA,OAAM,UAAEC,KAAK,EAAEC,KAAK,EAAEU,WAAW,EAAM;IAC9C,IAAAC,sBAAU,sEAET;MACCC,KAAK,EAAE,KAAK;MACZC,WAAW;IACZ,CAAC,CACD;IAED,OAAO,CAAC,CAACf,MAAM,CAAEI,kBAAgB,CAAE,CAACC,GAAG,CAAEH,KAAK,EAAEU,WAAW,CAAE;EAC9D,CAAC;AAAA,EACD;AAAC"}