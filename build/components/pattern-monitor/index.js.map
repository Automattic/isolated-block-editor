{"version":3,"sources":["../../../src/components/pattern-monitor/index.js"],"names":["PatternMonitor","props","currentPattern","updateBlocksWithoutUndo","previous","current","name","content","select","getCurrentPattern","dispatch"],"mappings":";;;;;;;AAIA;;AACA;;AACA;;AACA;;AACA;;AARA;AACA;AACA;;AAQA;;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASA,cAAT,CAAyBC,KAAzB,EAAiC;AAChC,MAAQC,cAAR,GAAoDD,KAApD,CAAQC,cAAR;AAAA,MAAwBC,uBAAxB,GAAoDF,KAApD,CAAwBE,uBAAxB;AACA,MAAMC,QAAQ,GAAG,sBAAjB,CAFgC,CAIhC;;AACA,0BAAW,YAAM;AAChB,QAAKF,cAAc,KAAK,IAAnB,IAA2B,CAAEE,QAAQ,CAACC,OAA3C,EAAqD;AACpD;AACA,KAHe,CAKhB;;;AACAD,IAAAA,QAAQ,CAACC,OAAT,GAAmBH,cAAc,CAACI,IAAlC;AACAH,IAAAA,uBAAuB,CAAE,mBAAOD,cAAc,CAACK,OAAtB,CAAF,CAAvB;AACA,GARD,EAQG,CAAEL,cAAF,CARH;AAUA,SAAO,IAAP;AACA;;eAEc,sBAAS,CACvB,sBAAY,UAAEM,MAAF,EAAc;AACzB,gBAA8BA,MAAM,CAAE,iBAAF,CAApC;AAAA,MAAQC,iBAAR,WAAQA,iBAAR;;AAEA,SAAO;AACNP,IAAAA,cAAc,EAAEO,iBAAiB;AAD3B,GAAP;AAGA,CAND,CADuB,EAQvB,wBAAc,UAAEC,QAAF,EAAgB;AAC7B,kBAAoCA,QAAQ,CAAE,iBAAF,CAA5C;AAAA,MAAQP,uBAAR,aAAQA,uBAAR;;AAEA,SAAO;AACNA,IAAAA,uBAAuB,EAAvBA;AADM,GAAP;AAGA,CAND,CARuB,CAAT,EAeVH,cAfU,C","sourcesContent":["/**\n * WordPress dependencies\n */\n\nimport { __ } from '@wordpress/i18n';\nimport { useEffect, useRef } from '@wordpress/element';\nimport { withDispatch, withSelect } from '@wordpress/data';\nimport { compose } from '@wordpress/compose';\nimport { parse } from '@wordpress/blocks';\n\n/** @typedef {import('../../index').BlockEditorSettings} BlockEditorSettings */\n/** @typedef {import('../../store/editor/reducer').Pattern} Pattern */\n\n/**\n * Update callback\n * @callback OnUpdate\n * @param {object[]} blocks - Editor content to save\n */\n\n/**\n * Sets up Gutenberg and the Isolated Block Editor\n *\n * An initial setup is performed, and is then reset each time the editor is focussed. This ensures we are applying the right\n * settings for this particular editor.\n *\n * @param {object} props - Component props\n * @param {BlockEditorSettings} props.settings - Settings\n * @param {Pattern} props.currentPattern - Currently selected pattern\n * @param {OnUpdate} props.updateBlocksWithoutUndo - Callback to update blocks\n */\nfunction PatternMonitor( props ) {\n\tconst { currentPattern, updateBlocksWithoutUndo } = props;\n\tconst previous = useRef();\n\n\t// Monitor the current pattern and update the editor content if it changes\n\tuseEffect( () => {\n\t\tif ( currentPattern === null || ! previous.current ) {\n\t\t\treturn;\n\t\t}\n\n\t\t// @ts-ignore\n\t\tprevious.current = currentPattern.name;\n\t\tupdateBlocksWithoutUndo( parse( currentPattern.content ) );\n\t}, [ currentPattern ] );\n\n\treturn null;\n}\n\nexport default compose( [\n\twithSelect( ( select ) => {\n\t\tconst { getCurrentPattern } = select( 'isolated/editor' );\n\n\t\treturn {\n\t\t\tcurrentPattern: getCurrentPattern(),\n\t\t};\n\t} ),\n\twithDispatch( ( dispatch ) => {\n\t\tconst { updateBlocksWithoutUndo } = dispatch( 'isolated/editor' );\n\n\t\treturn {\n\t\t\tupdateBlocksWithoutUndo,\n\t\t};\n\t} ),\n] )( PatternMonitor );\n"],"file":"index.js"}