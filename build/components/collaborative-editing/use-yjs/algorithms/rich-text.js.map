{"version":3,"file":"rich-text.js","names":["diff","_interopRequireWildcard","require","_lodash","_data","_richText","_getRequireWildcardCache","nodeInterop","WeakMap","cacheBabelInterop","cacheNodeInterop","obj","__esModule","_typeof","cache","has","get","newObj","hasPropertyDescriptor","Object","defineProperty","getOwnPropertyDescriptor","key","prototype","hasOwnProperty","call","desc","set","ownKeys","object","enumerableOnly","keys","getOwnPropertySymbols","symbols","filter","sym","enumerable","push","apply","_objectSpread","target","i","arguments","length","source","forEach","_defineProperty2","getOwnPropertyDescriptors","defineProperties","OBJECT_REPLACEMENT_CHARACTER","gutenFormatsToYFormats","formats","findIndexOfEqualFormat","needle","haystack","undefined","findIndex","f","visited","Array","fill","map","yFormats","formatsForChar","charIdx","fIdx","fLength","ci","foundIndex","format","namedGutenFormatToStandardTags","index","formatTypeRecord","select","getFormatType","type","tagName","_formatTypeRecord$att","attributes","remappedEntries","entries","_ref3","_ref4","_slicedToArray2","value","fromEntries","getInferredMultilineTag","html","trimmedHtml","trim","test","prepareReplacementsForTransaction","a","b","partitionReplacementTypes","arr","multilineWrapperReplacements","normalReplacements","r","isArray","_partitionReplacement","na","_partitionReplacement2","nb","replacementsDiff","simpleDiffArray","applyHTMLDelta","htmlA","htmlB","richTextMap","_richTextMap$doc","richTextOpts","_map","_map2","multilineTagA","multilineTagB","inferredMultilineTag","inferredMultilineWrapperTags","mergedRichTextOpts","multilineTag","multilineWrapperTags","create","stringDiff","simpleDiffString","text","previousCharFormats","nullifierFormat","reduce","acc","_ref6","_prepareReplacementsF","replacements","doc","transact","remove","insert","yfa","yfb","formatsDiff","isEqual","slice","richTextMapToHTML","toString","stringAsMultiline","replacement","replacementHTML","toHTMLString","replace","getMultilineWrapperTagHTMLReplacements","str","replacementsHTML","currentMultilineWrappers","foundLineSeparatorIndex","_loop","_replacements$foundLi","indexOf","__UNSTABLE_LINE_SEPARATOR","multilineWrappers","d","reverse","multilineWrapper","concat","isOpeningTag","wrapperTagReplacements","split","line","_wrapperTagReplacemen","join"],"sources":["../../../../../src/components/collaborative-editing/use-yjs/algorithms/rich-text.js"],"sourcesContent":["/**\n * External dependencies\n */\nimport * as diff from 'lib0/diff';\nimport { isEqual } from 'lodash';\n\n/** @typedef {import(\"yjs\").XmlText} Y.XmlText */\n\n/**\n * WordPress dependencies\n */\nimport { select } from '@wordpress/data';\nimport { create, toHTMLString, __UNSTABLE_LINE_SEPARATOR } from '@wordpress/rich-text';\n\nconst OBJECT_REPLACEMENT_CHARACTER = '\\ufffc'; // defined in @wordpress/rich-text special-characters\n\n/**\n * Convert an array of Gutenberg RichText formats to an array of range-based Y.Text formats.\n *\n * @param {Object[]} formats\n * @return {Object[]} Y.Text formats\n */\nexport function gutenFormatsToYFormats( formats ) {\n\tconst findIndexOfEqualFormat = ( needle, haystack = [] ) => haystack.findIndex( ( f ) => needle === f );\n\tconst visited = Array( formats.length )\n\t\t.fill( null )\n\t\t.map( () => ( {} ) );\n\tconst yFormats = [];\n\n\tformats.forEach( ( formatsForChar, charIdx ) => {\n\t\tformatsForChar.forEach( ( f, fIdx ) => {\n\t\t\tif ( visited[ charIdx ][ fIdx ] ) return;\n\n\t\t\tlet fLength = 1;\n\n\t\t\tfor ( let ci = charIdx + 1; ci < formats.length; ci++ ) {\n\t\t\t\tconst foundIndex = findIndexOfEqualFormat( f, formats[ ci ] );\n\t\t\t\tif ( foundIndex === -1 ) break;\n\n\t\t\t\tvisited[ ci ][ foundIndex ] = true;\n\t\t\t\tfLength++;\n\t\t\t}\n\n\t\t\tyFormats.push( {\n\t\t\t\tformat: namedGutenFormatToStandardTags( f ),\n\t\t\t\tindex: charIdx,\n\t\t\t\tlength: fLength,\n\t\t\t} );\n\t\t} );\n\t} );\n\n\treturn yFormats;\n}\n\n/**\n * Converts registered formats back to their standard tag/attribute names.\n *\n * For example, `core/bold` will be converted back to `strong`.\n *\n * @param format\n */\nexport function namedGutenFormatToStandardTags( format ) {\n\t// @ts-ignore\n\tconst formatTypeRecord = select( 'core/rich-text' ).getFormatType( format.type );\n\tif ( ! formatTypeRecord ) return { [ format.type ]: true };\n\n\tconst { tagName, attributes = {} } = formatTypeRecord;\n\tif ( ! format.attributes ) return { [ tagName ]: true };\n\n\tconst remappedEntries = Object.entries( format.attributes ).map( ( [ key, value ] ) => [\n\t\tattributes[ key ],\n\t\tvalue,\n\t] );\n\treturn { [ tagName ]: Object.fromEntries( remappedEntries ) };\n}\n\n// TODO: Unsolved problem\n// This is an imperfect inferral, so ideally we want to get this information\n// from Gutenberg's internal representation of the RichText.\nfunction getInferredMultilineTag( html ) {\n\tconst trimmedHtml = html.trim();\n\tif ( /^<li>/.test( trimmedHtml ) ) return 'li';\n\tif ( /^<p>/.test( trimmedHtml ) ) return 'p';\n\treturn undefined;\n}\n\n/**\n * Massage the Gutenberg replacements into Yjs-friendly structures.\n *\n * @param {Array} a The `replacements` array of a Gutenberg RichText.\n * @param {Array} b The `replacements` array of another Gutenberg RichText.\n */\nfunction prepareReplacementsForTransaction( a, b ) {\n\tconst partitionReplacementTypes = ( arr ) => {\n\t\tconst multilineWrapperReplacements = {};\n\t\tconst normalReplacements = [];\n\n\t\tarr.forEach( ( r, index ) => {\n\t\t\tif ( Array.isArray( r ) ) {\n\t\t\t\t// If it's an array, it's a multiline wrapper tag (e.g. ul/ol) and not a normal replacement.\n\t\t\t\tmultilineWrapperReplacements[ index ] = r;\n\t\t\t} else if ( r ) {\n\t\t\t\t// Since normal replacements do not rely on an index-based mapping\n\t\t\t\t// with the full text, let's condense the sparse array.\n\t\t\t\tnormalReplacements.push( r );\n\t\t\t}\n\t\t} );\n\t\treturn { multilineWrapperReplacements, normalReplacements };\n\t};\n\n\tconst { normalReplacements: na } = partitionReplacementTypes( a );\n\tconst { multilineWrapperReplacements, normalReplacements: nb } = partitionReplacementTypes( b );\n\n\treturn { multilineWrapperReplacements, replacementsDiff: diff.simpleDiffArray( na, nb ) };\n}\n\n/**\n * Apply the delta between two HTML strings to a Y.XmlText.\n *\n * @param {string} htmlA\n * @param {string} htmlB\n * @param {import(\"yjs\").Map} richTextMap\n * @param {Object} [richTextOpts] Optional options object to pass @wordpress/rich-text create().\n */\nexport function applyHTMLDelta( htmlA, htmlB, richTextMap, richTextOpts = {} ) {\n\tconst [ multilineTagA, multilineTagB ] = [ htmlA, htmlB ].map( getInferredMultilineTag );\n\tconst inferredMultilineTag = multilineTagA || multilineTagB;\n\tconst inferredMultilineWrapperTags = inferredMultilineTag === 'li' ? [ 'ul', 'ol' ] : [];\n\tconst mergedRichTextOpts = {\n\t\t...( inferredMultilineTag ? { multilineTag: inferredMultilineTag } : {} ),\n\t\tmultilineWrapperTags: inferredMultilineWrapperTags,\n\t\t...richTextOpts,\n\t};\n\n\trichTextMap.set( 'multilineTag', inferredMultilineTag );\n\n\tconst a = create( { ...mergedRichTextOpts, html: htmlA } );\n\tconst b = create( { ...mergedRichTextOpts, html: htmlB } );\n\n\tconst stringDiff = diff.simpleDiffString( a.text, b.text );\n\n\t// By default, a Yjs string insertion will inherit the formats of the previous character.\n\t// We need to prevent this by inserting with an explicit format object nullifying the previous formats.\n\tconst previousCharFormats = b.formats[ stringDiff.index - 1 ];\n\tconst nullifierFormat = previousCharFormats?.reduce(\n\t\t( acc, { type } ) => ( {\n\t\t\t...acc,\n\t\t\t[ type ]: null,\n\t\t} ),\n\t\t{}\n\t);\n\n\tconst { multilineWrapperReplacements, replacementsDiff } = prepareReplacementsForTransaction(\n\t\ta.replacements,\n\t\tb.replacements\n\t);\n\n\trichTextMap.doc?.transact( () => {\n\t\trichTextMap.get( 'xmlText' ).delete( stringDiff.index, stringDiff.remove );\n\t\trichTextMap.get( 'xmlText' ).insert( stringDiff.index, stringDiff.insert, nullifierFormat );\n\n\t\tconst yfa = gutenFormatsToYFormats( a.formats );\n\t\tconst yfb = gutenFormatsToYFormats( b.formats );\n\t\tconst formatsDiff = diff.simpleDiffArray( yfa, yfb, isEqual );\n\n\t\tif ( formatsDiff.remove ) {\n\t\t\tyfa.slice( formatsDiff.index, formatsDiff.index + formatsDiff.remove ).forEach( ( f ) => {\n\t\t\t\tconst tagName = Object.keys( f.format )[ 0 ];\n\t\t\t\trichTextMap.get( 'xmlText' ).format( f.index, f.length, { [ tagName ]: null } );\n\t\t\t} );\n\t\t}\n\t\tif ( formatsDiff.insert ) {\n\t\t\tformatsDiff.insert.forEach( ( f ) => richTextMap.get( 'xmlText' ).format( f.index, f.length, f.format ) );\n\t\t}\n\n\t\trichTextMap.get( 'replacements' ).delete( replacementsDiff.index, replacementsDiff.remove );\n\t\trichTextMap.get( 'replacements' ).insert( replacementsDiff.index, replacementsDiff.insert );\n\t\trichTextMap.set( 'multilineWrapperReplacements', multilineWrapperReplacements );\n\t} );\n}\n\n/**\n * Convert the RichText back from our Yjs representation to an HTML string.\n *\n * @param {import(\"yjs\").Map} richTextMap\n * @return {string}\n */\nexport function richTextMapToHTML( richTextMap ) {\n\tlet text = richTextMap.get( 'xmlText' ).toString();\n\n\t// Process multiline tags\n\tconst multilineTag = richTextMap.get( 'multilineTag' );\n\ttext = multilineTag\n\t\t? stringAsMultiline( text, multilineTag, richTextMap.get( 'multilineWrapperReplacements' ) )\n\t\t: text;\n\n\t// Process replacements (e.g. inline images)\n\trichTextMap.get( 'replacements' ).forEach( ( replacement ) => {\n\t\tconst replacementHTML = toHTMLString( {\n\t\t\tvalue: {\n\t\t\t\treplacements: [ replacement ],\n\t\t\t\tformats: Array( 1 ),\n\t\t\t\ttext: OBJECT_REPLACEMENT_CHARACTER,\n\t\t\t},\n\t\t} );\n\t\ttext = text.replace( OBJECT_REPLACEMENT_CHARACTER, replacementHTML );\n\t} );\n\n\treturn text;\n}\n\n/**\n * Get HTML replacements for each multiline wrapper tag replacement.\n *\n * @param {string} str\n * @param {Record<number, {type: string}[]>} replacements\n */\nfunction getMultilineWrapperTagHTMLReplacements( str, replacements ) {\n\tconst replacementsHTML = [];\n\tlet currentMultilineWrappers = [];\n\tlet foundLineSeparatorIndex = -1;\n\n\tdo {\n\t\tfoundLineSeparatorIndex = str.indexOf( __UNSTABLE_LINE_SEPARATOR, foundLineSeparatorIndex + 1 );\n\t\tconst multilineWrappers = replacements[ foundLineSeparatorIndex ] ?? [];\n\t\tconst d = diff.simpleDiffArray( currentMultilineWrappers, multilineWrappers, isEqual );\n\t\tlet html = '';\n\n\t\t// Closing multiline wrapper tags\n\t\tcurrentMultilineWrappers\n\t\t\t.slice( d.index, d.index + d.remove )\n\t\t\t.reverse()\n\t\t\t.forEach( ( multilineWrapper ) => {\n\t\t\t\thtml += `</${ multilineWrapper.type }></li>`;\n\t\t\t} );\n\n\t\t// Opening multiline wrapper tags\n\t\td.insert.forEach( ( multilineWrapper ) => {\n\t\t\thtml += `<${ multilineWrapper.type }>`;\n\t\t} );\n\n\t\treplacementsHTML.push( { isOpeningTag: !! d.insert.length, html } );\n\t\tcurrentMultilineWrappers = multilineWrappers;\n\t} while ( foundLineSeparatorIndex !== -1 );\n\n\treturn replacementsHTML;\n}\n\n/**\n * Wraps each line of a multiline string with the given tags.\n *\n * @param {string} str A multiline string delimited by __UNSTABLE_LINE_SEPARATOR.\n * @param {string} multilineTag The tag name to wrap each line with.\n * @param {Record<number, {type: string}[]>} replacements Multiline wrapper replacements.\n * @return {string} The string reconstructed with multiline considerations.\n */\nfunction stringAsMultiline( str, multilineTag, replacements ) {\n\tconst wrapperTagReplacements = getMultilineWrapperTagHTMLReplacements( str, replacements );\n\n\treturn str\n\t\t.split( __UNSTABLE_LINE_SEPARATOR )\n\t\t.map( ( line, i ) => {\n\t\t\tconst { isOpeningTag, html } = wrapperTagReplacements[ i ];\n\n\t\t\treturn isOpeningTag\n\t\t\t\t? `<${ multilineTag }>${ line }${ html }`\n\t\t\t\t: `<${ multilineTag }>${ line }</${ multilineTag }>${ html }`;\n\t\t} )\n\t\t.join( '' );\n}\n"],"mappings":";;;;;;;;;;;;;AAGA,IAAAA,IAAA,GAAAC,uBAAA,CAAAC,OAAA;AACA,IAAAC,OAAA,GAAAD,OAAA;AAOA,IAAAE,KAAA,GAAAF,OAAA;AACA,IAAAG,SAAA,GAAAH,OAAA;AAAuF,SAAAI,yBAAAC,WAAA,eAAAC,OAAA,kCAAAC,iBAAA,OAAAD,OAAA,QAAAE,gBAAA,OAAAF,OAAA,YAAAF,wBAAA,YAAAA,yBAAAC,WAAA,WAAAA,WAAA,GAAAG,gBAAA,GAAAD,iBAAA,KAAAF,WAAA;AAAA,SAAAN,wBAAAU,GAAA,EAAAJ,WAAA,SAAAA,WAAA,IAAAI,GAAA,IAAAA,GAAA,CAAAC,UAAA,WAAAD,GAAA,QAAAA,GAAA,aAAAE,OAAA,CAAAF,GAAA,yBAAAA,GAAA,uCAAAA,GAAA,UAAAG,KAAA,GAAAR,wBAAA,CAAAC,WAAA,OAAAO,KAAA,IAAAA,KAAA,CAAAC,GAAA,CAAAJ,GAAA,YAAAG,KAAA,CAAAE,GAAA,CAAAL,GAAA,SAAAM,MAAA,WAAAC,qBAAA,GAAAC,MAAA,CAAAC,cAAA,IAAAD,MAAA,CAAAE,wBAAA,WAAAC,GAAA,IAAAX,GAAA,QAAAW,GAAA,kBAAAH,MAAA,CAAAI,SAAA,CAAAC,cAAA,CAAAC,IAAA,CAAAd,GAAA,EAAAW,GAAA,SAAAI,IAAA,GAAAR,qBAAA,GAAAC,MAAA,CAAAE,wBAAA,CAAAV,GAAA,EAAAW,GAAA,cAAAI,IAAA,KAAAA,IAAA,CAAAV,GAAA,IAAAU,IAAA,CAAAC,GAAA,KAAAR,MAAA,CAAAC,cAAA,CAAAH,MAAA,EAAAK,GAAA,EAAAI,IAAA,YAAAT,MAAA,CAAAK,GAAA,IAAAX,GAAA,CAAAW,GAAA,SAAAL,MAAA,cAAAN,GAAA,MAAAG,KAAA,IAAAA,KAAA,CAAAa,GAAA,CAAAhB,GAAA,EAAAM,MAAA,YAAAA,MAAA;AAAA,SAAAW,QAAAC,MAAA,EAAAC,cAAA,QAAAC,IAAA,GAAAZ,MAAA,CAAAY,IAAA,CAAAF,MAAA,OAAAV,MAAA,CAAAa,qBAAA,QAAAC,OAAA,GAAAd,MAAA,CAAAa,qBAAA,CAAAH,MAAA,GAAAC,cAAA,KAAAG,OAAA,GAAAA,OAAA,CAAAC,MAAA,WAAAC,GAAA,WAAAhB,MAAA,CAAAE,wBAAA,CAAAQ,MAAA,EAAAM,GAAA,EAAAC,UAAA,OAAAL,IAAA,CAAAM,IAAA,CAAAC,KAAA,CAAAP,IAAA,EAAAE,OAAA,YAAAF,IAAA;AAAA,SAAAQ,cAAAC,MAAA,aAAAC,CAAA,MAAAA,CAAA,GAAAC,SAAA,CAAAC,MAAA,EAAAF,CAAA,UAAAG,MAAA,WAAAF,SAAA,CAAAD,CAAA,IAAAC,SAAA,CAAAD,CAAA,QAAAA,CAAA,OAAAb,OAAA,CAAAT,MAAA,CAAAyB,MAAA,OAAAC,OAAA,WAAAvB,GAAA,QAAAwB,gBAAA,aAAAN,MAAA,EAAAlB,GAAA,EAAAsB,MAAA,CAAAtB,GAAA,SAAAH,MAAA,CAAA4B,yBAAA,GAAA5B,MAAA,CAAA6B,gBAAA,CAAAR,MAAA,EAAArB,MAAA,CAAA4B,yBAAA,CAAAH,MAAA,KAAAhB,OAAA,CAAAT,MAAA,CAAAyB,MAAA,GAAAC,OAAA,WAAAvB,GAAA,IAAAH,MAAA,CAAAC,cAAA,CAAAoB,MAAA,EAAAlB,GAAA,EAAAH,MAAA,CAAAE,wBAAA,CAAAuB,MAAA,EAAAtB,GAAA,iBAAAkB,MAAA,IAZvF;AACA;AACA,+gBAFA,CAMA,kDAEA;AACA;AACA;AAIA,IAAMS,4BAA4B,GAAG,QAAQ,CAAC,CAAC;;AAE/C;AACA;AACA;AACA;AACA;AACA;AACO,SAASC,sBAAsBA,CAAEC,OAAO,EAAG;EACjD,IAAMC,sBAAsB,GAAG,SAAzBA,sBAAsBA,CAAKC,MAAM;IAAA,IAAEC,QAAQ,GAAAZ,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAa,SAAA,GAAAb,SAAA,MAAG,EAAE;IAAA,OAAMY,QAAQ,CAACE,SAAS,CAAE,UAAEC,CAAC;MAAA,OAAMJ,MAAM,KAAKI,CAAC;IAAA,EAAE;EAAA;EACvG,IAAMC,OAAO,GAAGC,KAAK,CAAER,OAAO,CAACR,MAAM,CAAE,CACrCiB,IAAI,CAAE,IAAI,CAAE,CACZC,GAAG,CAAE;IAAA,OAAQ,CAAC,CAAC;EAAA,CAAE,CAAE;EACrB,IAAMC,QAAQ,GAAG,EAAE;EAEnBX,OAAO,CAACN,OAAO,CAAE,UAAEkB,cAAc,EAAEC,OAAO,EAAM;IAC/CD,cAAc,CAAClB,OAAO,CAAE,UAAEY,CAAC,EAAEQ,IAAI,EAAM;MACtC,IAAKP,OAAO,CAAEM,OAAO,CAAE,CAAEC,IAAI,CAAE,EAAG;MAElC,IAAIC,OAAO,GAAG,CAAC;MAEf,KAAM,IAAIC,EAAE,GAAGH,OAAO,GAAG,CAAC,EAAEG,EAAE,GAAGhB,OAAO,CAACR,MAAM,EAAEwB,EAAE,EAAE,EAAG;QACvD,IAAMC,UAAU,GAAGhB,sBAAsB,CAAEK,CAAC,EAAEN,OAAO,CAAEgB,EAAE,CAAE,CAAE;QAC7D,IAAKC,UAAU,KAAK,CAAC,CAAC,EAAG;QAEzBV,OAAO,CAAES,EAAE,CAAE,CAAEC,UAAU,CAAE,GAAG,IAAI;QAClCF,OAAO,EAAE;MACV;MAEAJ,QAAQ,CAACzB,IAAI,CAAE;QACdgC,MAAM,EAAEC,8BAA8B,CAAEb,CAAC,CAAE;QAC3Cc,KAAK,EAAEP,OAAO;QACdrB,MAAM,EAAEuB;MACT,CAAC,CAAE;IACJ,CAAC,CAAE;EACJ,CAAC,CAAE;EAEH,OAAOJ,QAAQ;AAChB;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACO,SAASQ,8BAA8BA,CAAED,MAAM,EAAG;EACxD;EACA,IAAMG,gBAAgB,GAAG,IAAAC,YAAM,EAAE,gBAAgB,CAAE,CAACC,aAAa,CAAEL,MAAM,CAACM,IAAI,CAAE;EAChF,IAAK,CAAEH,gBAAgB,EAAG,WAAA1B,gBAAA,iBAAWuB,MAAM,CAACM,IAAI,EAAI,IAAI;EAExD,IAAQC,OAAO,GAAsBJ,gBAAgB,CAA7CI,OAAO;IAAAC,qBAAA,GAAsBL,gBAAgB,CAApCM,UAAU;IAAVA,UAAU,GAAAD,qBAAA,cAAG,CAAC,CAAC,GAAAA,qBAAA;EAChC,IAAK,CAAER,MAAM,CAACS,UAAU,EAAG,WAAAhC,gBAAA,iBAAW8B,OAAO,EAAI,IAAI;EAErD,IAAMG,eAAe,GAAG5D,MAAM,CAAC6D,OAAO,CAAEX,MAAM,CAACS,UAAU,CAAE,CAACjB,GAAG,CAAE,UAAAoB,KAAA;IAAA,IAAAC,KAAA,OAAAC,eAAA,aAAAF,KAAA;MAAI3D,GAAG,GAAA4D,KAAA;MAAEE,KAAK,GAAAF,KAAA;IAAA,OAAQ,CACtFJ,UAAU,CAAExD,GAAG,CAAE,EACjB8D,KAAK,CACL;EAAA,EAAE;EACH,WAAAtC,gBAAA,iBAAW8B,OAAO,EAAIzD,MAAM,CAACkE,WAAW,CAAEN,eAAe,CAAE;AAC5D;;AAEA;AACA;AACA;AACA,SAASO,uBAAuBA,CAAEC,IAAI,EAAG;EACxC,IAAMC,WAAW,GAAGD,IAAI,CAACE,IAAI,EAAE;EAC/B,IAAK,OAAO,CAACC,IAAI,CAAEF,WAAW,CAAE,EAAG,OAAO,IAAI;EAC9C,IAAK,MAAM,CAACE,IAAI,CAAEF,WAAW,CAAE,EAAG,OAAO,GAAG;EAC5C,OAAOjC,SAAS;AACjB;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,SAASoC,iCAAiCA,CAAEC,CAAC,EAAEC,CAAC,EAAG;EAClD,IAAMC,yBAAyB,GAAG,SAA5BA,yBAAyBA,CAAKC,GAAG,EAAM;IAC5C,IAAMC,4BAA4B,GAAG,CAAC,CAAC;IACvC,IAAMC,kBAAkB,GAAG,EAAE;IAE7BF,GAAG,CAAClD,OAAO,CAAE,UAAEqD,CAAC,EAAE3B,KAAK,EAAM;MAC5B,IAAKZ,KAAK,CAACwC,OAAO,CAAED,CAAC,CAAE,EAAG;QACzB;QACAF,4BAA4B,CAAEzB,KAAK,CAAE,GAAG2B,CAAC;MAC1C,CAAC,MAAM,IAAKA,CAAC,EAAG;QACf;QACA;QACAD,kBAAkB,CAAC5D,IAAI,CAAE6D,CAAC,CAAE;MAC7B;IACD,CAAC,CAAE;IACH,OAAO;MAAEF,4BAA4B,EAA5BA,4BAA4B;MAAEC,kBAAkB,EAAlBA;IAAmB,CAAC;EAC5D,CAAC;EAED,IAAAG,qBAAA,GAAmCN,yBAAyB,CAAEF,CAAC,CAAE;IAArCS,EAAE,GAAAD,qBAAA,CAAtBH,kBAAkB;EAC1B,IAAAK,sBAAA,GAAiER,yBAAyB,CAAED,CAAC,CAAE;IAAvFG,4BAA4B,GAAAM,sBAAA,CAA5BN,4BAA4B;IAAsBO,EAAE,GAAAD,sBAAA,CAAtBL,kBAAkB;EAExD,OAAO;IAAED,4BAA4B,EAA5BA,4BAA4B;IAAEQ,gBAAgB,EAAExG,IAAI,CAACyG,eAAe,CAAEJ,EAAE,EAAEE,EAAE;EAAG,CAAC;AAC1F;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO,SAASG,cAAcA,CAAEC,KAAK,EAAEC,KAAK,EAAEC,WAAW,EAAsB;EAAA,IAAAC,gBAAA;EAAA,IAApBC,YAAY,GAAArE,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAa,SAAA,GAAAb,SAAA,MAAG,CAAC,CAAC;EAC3E,IAAAsE,IAAA,GAAyC,CAAEL,KAAK,EAAEC,KAAK,CAAE,CAAC/C,GAAG,CAAEyB,uBAAuB,CAAE;IAAA2B,KAAA,OAAA9B,eAAA,aAAA6B,IAAA;IAAhFE,aAAa,GAAAD,KAAA;IAAEE,aAAa,GAAAF,KAAA;EACpC,IAAMG,oBAAoB,GAAGF,aAAa,IAAIC,aAAa;EAC3D,IAAME,4BAA4B,GAAGD,oBAAoB,KAAK,IAAI,GAAG,CAAE,IAAI,EAAE,IAAI,CAAE,GAAG,EAAE;EACxF,IAAME,kBAAkB,GAAA/E,aAAA,CAAAA,aAAA,KAClB6E,oBAAoB,GAAG;IAAEG,YAAY,EAAEH;EAAqB,CAAC,GAAG,CAAC,CAAC;IACvEI,oBAAoB,EAAEH;EAA4B,GAC/CN,YAAY,CACf;EAEDF,WAAW,CAAClF,GAAG,CAAE,cAAc,EAAEyF,oBAAoB,CAAE;EAEvD,IAAMxB,CAAC,GAAG,IAAA6B,gBAAM,EAAAlF,aAAA,CAAAA,aAAA,KAAO+E,kBAAkB;IAAE/B,IAAI,EAAEoB;EAAK,GAAI;EAC1D,IAAMd,CAAC,GAAG,IAAA4B,gBAAM,EAAAlF,aAAA,CAAAA,aAAA,KAAO+E,kBAAkB;IAAE/B,IAAI,EAAEqB;EAAK,GAAI;EAE1D,IAAMc,UAAU,GAAG1H,IAAI,CAAC2H,gBAAgB,CAAE/B,CAAC,CAACgC,IAAI,EAAE/B,CAAC,CAAC+B,IAAI,CAAE;;EAE1D;EACA;EACA,IAAMC,mBAAmB,GAAGhC,CAAC,CAAC1C,OAAO,CAAEuE,UAAU,CAACnD,KAAK,GAAG,CAAC,CAAE;EAC7D,IAAMuD,eAAe,GAAGD,mBAAmB,aAAnBA,mBAAmB,uBAAnBA,mBAAmB,CAAEE,MAAM,CAClD,UAAEC,GAAG,EAAAC,KAAA;IAAA,IAAItD,IAAI,GAAAsD,KAAA,CAAJtD,IAAI;IAAA,OAAApC,aAAA,CAAAA,aAAA,KACTyF,GAAG,WAAAlF,gBAAA,iBACJ6B,IAAI,EAAI,IAAI;EAAA,CACZ,EACH,CAAC,CAAC,CACF;EAED,IAAAuD,qBAAA,GAA2DvC,iCAAiC,CAC3FC,CAAC,CAACuC,YAAY,EACdtC,CAAC,CAACsC,YAAY,CACd;IAHOnC,4BAA4B,GAAAkC,qBAAA,CAA5BlC,4BAA4B;IAAEQ,gBAAgB,GAAA0B,qBAAA,CAAhB1B,gBAAgB;EAKtD,CAAAM,gBAAA,GAAAD,WAAW,CAACuB,GAAG,cAAAtB,gBAAA,uBAAfA,gBAAA,CAAiBuB,QAAQ,CAAE,YAAM;IAChCxB,WAAW,CAAC7F,GAAG,CAAE,SAAS,CAAE,UAAO,CAAE0G,UAAU,CAACnD,KAAK,EAAEmD,UAAU,CAACY,MAAM,CAAE;IAC1EzB,WAAW,CAAC7F,GAAG,CAAE,SAAS,CAAE,CAACuH,MAAM,CAAEb,UAAU,CAACnD,KAAK,EAAEmD,UAAU,CAACa,MAAM,EAAET,eAAe,CAAE;IAE3F,IAAMU,GAAG,GAAGtF,sBAAsB,CAAE0C,CAAC,CAACzC,OAAO,CAAE;IAC/C,IAAMsF,GAAG,GAAGvF,sBAAsB,CAAE2C,CAAC,CAAC1C,OAAO,CAAE;IAC/C,IAAMuF,WAAW,GAAG1I,IAAI,CAACyG,eAAe,CAAE+B,GAAG,EAAEC,GAAG,EAAEE,eAAO,CAAE;IAE7D,IAAKD,WAAW,CAACJ,MAAM,EAAG;MACzBE,GAAG,CAACI,KAAK,CAAEF,WAAW,CAACnE,KAAK,EAAEmE,WAAW,CAACnE,KAAK,GAAGmE,WAAW,CAACJ,MAAM,CAAE,CAACzF,OAAO,CAAE,UAAEY,CAAC,EAAM;QACxF,IAAMmB,OAAO,GAAGzD,MAAM,CAACY,IAAI,CAAE0B,CAAC,CAACY,MAAM,CAAE,CAAE,CAAC,CAAE;QAC5CwC,WAAW,CAAC7F,GAAG,CAAE,SAAS,CAAE,CAACqD,MAAM,CAAEZ,CAAC,CAACc,KAAK,EAAEd,CAAC,CAACd,MAAM,MAAAG,gBAAA,iBAAM8B,OAAO,EAAI,IAAI,EAAI;MAChF,CAAC,CAAE;IACJ;IACA,IAAK8D,WAAW,CAACH,MAAM,EAAG;MACzBG,WAAW,CAACH,MAAM,CAAC1F,OAAO,CAAE,UAAEY,CAAC;QAAA,OAAMoD,WAAW,CAAC7F,GAAG,CAAE,SAAS,CAAE,CAACqD,MAAM,CAAEZ,CAAC,CAACc,KAAK,EAAEd,CAAC,CAACd,MAAM,EAAEc,CAAC,CAACY,MAAM,CAAE;MAAA,EAAE;IAC1G;IAEAwC,WAAW,CAAC7F,GAAG,CAAE,cAAc,CAAE,UAAO,CAAEwF,gBAAgB,CAACjC,KAAK,EAAEiC,gBAAgB,CAAC8B,MAAM,CAAE;IAC3FzB,WAAW,CAAC7F,GAAG,CAAE,cAAc,CAAE,CAACuH,MAAM,CAAE/B,gBAAgB,CAACjC,KAAK,EAAEiC,gBAAgB,CAAC+B,MAAM,CAAE;IAC3F1B,WAAW,CAAClF,GAAG,CAAE,8BAA8B,EAAEqE,4BAA4B,CAAE;EAChF,CAAC,CAAE;AACJ;;AAEA;AACA;AACA;AACA;AACA;AACA;AACO,SAAS6C,iBAAiBA,CAAEhC,WAAW,EAAG;EAChD,IAAIe,IAAI,GAAGf,WAAW,CAAC7F,GAAG,CAAE,SAAS,CAAE,CAAC8H,QAAQ,EAAE;;EAElD;EACA,IAAMvB,YAAY,GAAGV,WAAW,CAAC7F,GAAG,CAAE,cAAc,CAAE;EACtD4G,IAAI,GAAGL,YAAY,GAChBwB,iBAAiB,CAAEnB,IAAI,EAAEL,YAAY,EAAEV,WAAW,CAAC7F,GAAG,CAAE,8BAA8B,CAAE,CAAE,GAC1F4G,IAAI;;EAEP;EACAf,WAAW,CAAC7F,GAAG,CAAE,cAAc,CAAE,CAAC6B,OAAO,CAAE,UAAEmG,WAAW,EAAM;IAC7D,IAAMC,eAAe,GAAG,IAAAC,sBAAY,EAAE;MACrC9D,KAAK,EAAE;QACN+C,YAAY,EAAE,CAAEa,WAAW,CAAE;QAC7B7F,OAAO,EAAEQ,KAAK,CAAE,CAAC,CAAE;QACnBiE,IAAI,EAAE3E;MACP;IACD,CAAC,CAAE;IACH2E,IAAI,GAAGA,IAAI,CAACuB,OAAO,CAAElG,4BAA4B,EAAEgG,eAAe,CAAE;EACrE,CAAC,CAAE;EAEH,OAAOrB,IAAI;AACZ;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,SAASwB,sCAAsCA,CAAEC,GAAG,EAAElB,YAAY,EAAG;EACpE,IAAMmB,gBAAgB,GAAG,EAAE;EAC3B,IAAIC,wBAAwB,GAAG,EAAE;EACjC,IAAIC,uBAAuB,GAAG,CAAC,CAAC;EAAC,IAAAC,KAAA,YAAAA,MAAA,EAE9B;IAAA,IAAAC,qBAAA;IACFF,uBAAuB,GAAGH,GAAG,CAACM,OAAO,CAAEC,mCAAyB,EAAEJ,uBAAuB,GAAG,CAAC,CAAE;IAC/F,IAAMK,iBAAiB,IAAAH,qBAAA,GAAGvB,YAAY,CAAEqB,uBAAuB,CAAE,cAAAE,qBAAA,cAAAA,qBAAA,GAAI,EAAE;IACvE,IAAMI,CAAC,GAAG9J,IAAI,CAACyG,eAAe,CAAE8C,wBAAwB,EAAEM,iBAAiB,EAAElB,eAAO,CAAE;IACtF,IAAIpD,IAAI,GAAG,EAAE;;IAEb;IACAgE,wBAAwB,CACtBX,KAAK,CAAEkB,CAAC,CAACvF,KAAK,EAAEuF,CAAC,CAACvF,KAAK,GAAGuF,CAAC,CAACxB,MAAM,CAAE,CACpCyB,OAAO,EAAE,CACTlH,OAAO,CAAE,UAAEmH,gBAAgB,EAAM;MACjCzE,IAAI,SAAA0E,MAAA,CAAUD,gBAAgB,CAACrF,IAAI,WAAS;IAC7C,CAAC,CAAE;;IAEJ;IACAmF,CAAC,CAACvB,MAAM,CAAC1F,OAAO,CAAE,UAAEmH,gBAAgB,EAAM;MACzCzE,IAAI,QAAA0E,MAAA,CAASD,gBAAgB,CAACrF,IAAI,MAAI;IACvC,CAAC,CAAE;IAEH2E,gBAAgB,CAACjH,IAAI,CAAE;MAAE6H,YAAY,EAAE,CAAC,CAAEJ,CAAC,CAACvB,MAAM,CAAC5F,MAAM;MAAE4C,IAAI,EAAJA;IAAK,CAAC,CAAE;IACnEgE,wBAAwB,GAAGM,iBAAiB;EAC7C,CAAC;EArBD;IAAAJ,KAAA;EAAA,SAqBUD,uBAAuB,KAAK,CAAC,CAAC;EAExC,OAAOF,gBAAgB;AACxB;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASP,iBAAiBA,CAAEM,GAAG,EAAE9B,YAAY,EAAEY,YAAY,EAAG;EAC7D,IAAMgC,sBAAsB,GAAGf,sCAAsC,CAAEC,GAAG,EAAElB,YAAY,CAAE;EAE1F,OAAOkB,GAAG,CACRe,KAAK,CAAER,mCAAyB,CAAE,CAClC/F,GAAG,CAAE,UAAEwG,IAAI,EAAE5H,CAAC,EAAM;IACpB,IAAA6H,qBAAA,GAA+BH,sBAAsB,CAAE1H,CAAC,CAAE;MAAlDyH,YAAY,GAAAI,qBAAA,CAAZJ,YAAY;MAAE3E,IAAI,GAAA+E,qBAAA,CAAJ/E,IAAI;IAE1B,OAAO2E,YAAY,OAAAD,MAAA,CACX1C,YAAY,OAAA0C,MAAA,CAAMI,IAAI,EAAAJ,MAAA,CAAK1E,IAAI,QAAA0E,MAAA,CAC/B1C,YAAY,OAAA0C,MAAA,CAAMI,IAAI,QAAAJ,MAAA,CAAO1C,YAAY,OAAA0C,MAAA,CAAM1E,IAAI,CAAG;EAC/D,CAAC,CAAE,CACFgF,IAAI,CAAE,EAAE,CAAE;AACb"}