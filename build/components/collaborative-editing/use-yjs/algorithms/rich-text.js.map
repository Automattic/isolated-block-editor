{"version":3,"file":"rich-text.js","names":["OBJECT_REPLACEMENT_CHARACTER","gutenFormatsToYFormats","formats","findIndexOfEqualFormat","needle","haystack","findIndex","f","visited","Array","length","fill","map","yFormats","forEach","formatsForChar","charIdx","fIdx","fLength","ci","foundIndex","push","format","namedGutenFormatToStandardTags","index","formatTypeRecord","select","getFormatType","type","tagName","attributes","remappedEntries","Object","entries","key","value","fromEntries","getInferredMultilineTag","html","trimmedHtml","trim","test","undefined","prepareReplacementsForTransaction","a","b","partitionReplacementTypes","arr","multilineWrapperReplacements","normalReplacements","r","isArray","na","nb","replacementsDiff","diff","simpleDiffArray","applyHTMLDelta","htmlA","htmlB","richTextMap","richTextOpts","multilineTagA","multilineTagB","inferredMultilineTag","inferredMultilineWrapperTags","mergedRichTextOpts","multilineTag","multilineWrapperTags","set","create","stringDiff","simpleDiffString","text","previousCharFormats","nullifierFormat","reduce","acc","replacements","doc","transact","get","remove","insert","yfa","yfb","formatsDiff","isEqual","slice","keys","richTextMapToHTML","toString","stringAsMultiline","replacement","replacementHTML","toHTMLString","replace","getMultilineWrapperTagHTMLReplacements","str","replacementsHTML","currentMultilineWrappers","foundLineSeparatorIndex","indexOf","__UNSTABLE_LINE_SEPARATOR","multilineWrappers","d","reverse","multilineWrapper","isOpeningTag","wrapperTagReplacements","split","line","i","join"],"sources":["../../../../../src/components/collaborative-editing/use-yjs/algorithms/rich-text.js"],"sourcesContent":["/**\n * External dependencies\n */\nimport * as diff from 'lib0/diff';\nimport { isEqual } from 'lodash';\n\n/** @typedef {import(\"yjs\").XmlText} Y.XmlText */\n\n/**\n * WordPress dependencies\n */\nimport { select } from '@wordpress/data';\nimport { create, toHTMLString, __UNSTABLE_LINE_SEPARATOR } from '@wordpress/rich-text';\n\nconst OBJECT_REPLACEMENT_CHARACTER = '\\ufffc'; // defined in @wordpress/rich-text special-characters\n\n/**\n * Convert an array of Gutenberg RichText formats to an array of range-based Y.Text formats.\n *\n * @param {Object[]} formats\n * @return {Object[]} Y.Text formats\n */\nexport function gutenFormatsToYFormats( formats ) {\n\tconst findIndexOfEqualFormat = ( needle, haystack = [] ) => haystack.findIndex( ( f ) => needle === f );\n\tconst visited = Array( formats.length )\n\t\t.fill( null )\n\t\t.map( () => ( {} ) );\n\tconst yFormats = [];\n\n\tformats.forEach( ( formatsForChar, charIdx ) => {\n\t\tformatsForChar.forEach( ( f, fIdx ) => {\n\t\t\tif ( visited[ charIdx ][ fIdx ] ) return;\n\n\t\t\tlet fLength = 1;\n\n\t\t\tfor ( let ci = charIdx + 1; ci < formats.length; ci++ ) {\n\t\t\t\tconst foundIndex = findIndexOfEqualFormat( f, formats[ ci ] );\n\t\t\t\tif ( foundIndex === -1 ) break;\n\n\t\t\t\tvisited[ ci ][ foundIndex ] = true;\n\t\t\t\tfLength++;\n\t\t\t}\n\n\t\t\tyFormats.push( {\n\t\t\t\tformat: namedGutenFormatToStandardTags( f ),\n\t\t\t\tindex: charIdx,\n\t\t\t\tlength: fLength,\n\t\t\t} );\n\t\t} );\n\t} );\n\n\treturn yFormats;\n}\n\n/**\n * Converts registered formats back to their standard tag/attribute names.\n *\n * For example, `core/bold` will be converted back to `strong`.\n *\n * @param format\n */\nexport function namedGutenFormatToStandardTags( format ) {\n\tconst formatTypeRecord = select( 'core/rich-text' ).getFormatType( format.type );\n\tif ( ! formatTypeRecord ) return { [ format.type ]: true };\n\n\tconst { tagName, attributes = {} } = formatTypeRecord;\n\tif ( ! format.attributes ) return { [ tagName ]: true };\n\n\tconst remappedEntries = Object.entries( format.attributes ).map( ( [ key, value ] ) => [\n\t\tattributes[ key ],\n\t\tvalue,\n\t] );\n\treturn { [ tagName ]: Object.fromEntries( remappedEntries ) };\n}\n\n// TODO: Unsolved problem\n// This is an imperfect inferral, so ideally we want to get this information\n// from Gutenberg's internal representation of the RichText.\nfunction getInferredMultilineTag( html ) {\n\tconst trimmedHtml = html.trim();\n\tif ( /^<li>/.test( trimmedHtml ) ) return 'li';\n\tif ( /^<p>/.test( trimmedHtml ) ) return 'p';\n\treturn undefined;\n}\n\n/**\n * Massage the Gutenberg replacements into Yjs-friendly structures.\n *\n * @param {Array} a The `replacements` array of a Gutenberg RichText.\n * @param {Array} b The `replacements` array of another Gutenberg RichText.\n */\nfunction prepareReplacementsForTransaction( a, b ) {\n\tconst partitionReplacementTypes = ( arr ) => {\n\t\tconst multilineWrapperReplacements = {};\n\t\tconst normalReplacements = [];\n\n\t\tarr.forEach( ( r, index ) => {\n\t\t\tif ( Array.isArray( r ) ) {\n\t\t\t\t// If it's an array, it's a multiline wrapper tag (e.g. ul/ol) and not a normal replacement.\n\t\t\t\tmultilineWrapperReplacements[ index ] = r;\n\t\t\t} else if ( r ) {\n\t\t\t\t// Since normal replacements do not rely on an index-based mapping\n\t\t\t\t// with the full text, let's condense the sparse array.\n\t\t\t\tnormalReplacements.push( r );\n\t\t\t}\n\t\t} );\n\t\treturn { multilineWrapperReplacements, normalReplacements };\n\t};\n\n\tconst { normalReplacements: na } = partitionReplacementTypes( a );\n\tconst { multilineWrapperReplacements, normalReplacements: nb } = partitionReplacementTypes( b );\n\n\treturn { multilineWrapperReplacements, replacementsDiff: diff.simpleDiffArray( na, nb ) };\n}\n\n/**\n * Apply the delta between two HTML strings to a Y.XmlText.\n *\n * @param {string} htmlA\n * @param {string} htmlB\n * @param {import(\"yjs\").Map} richTextMap\n * @param {Object} [richTextOpts] Optional options object to pass @wordpress/rich-text create().\n */\nexport function applyHTMLDelta( htmlA, htmlB, richTextMap, richTextOpts = {} ) {\n\tconst [ multilineTagA, multilineTagB ] = [ htmlA, htmlB ].map( getInferredMultilineTag );\n\tconst inferredMultilineTag = multilineTagA || multilineTagB;\n\tconst inferredMultilineWrapperTags = inferredMultilineTag === 'li' ? [ 'ul', 'ol' ] : [];\n\tconst mergedRichTextOpts = {\n\t\t...( inferredMultilineTag ? { multilineTag: inferredMultilineTag } : {} ),\n\t\tmultilineWrapperTags: inferredMultilineWrapperTags,\n\t\t...richTextOpts,\n\t};\n\n\trichTextMap.set( 'multilineTag', inferredMultilineTag );\n\n\tconst a = create( { ...mergedRichTextOpts, html: htmlA } );\n\tconst b = create( { ...mergedRichTextOpts, html: htmlB } );\n\n\tconst stringDiff = diff.simpleDiffString( a.text, b.text );\n\n\t// By default, a Yjs string insertion will inherit the formats of the previous character.\n\t// We need to prevent this by inserting with an explicit format object nullifying the previous formats.\n\tconst previousCharFormats = b.formats[ stringDiff.index - 1 ];\n\tconst nullifierFormat = previousCharFormats?.reduce(\n\t\t( acc, { type } ) => ( {\n\t\t\t...acc,\n\t\t\t[ type ]: null,\n\t\t} ),\n\t\t{}\n\t);\n\n\tconst { multilineWrapperReplacements, replacementsDiff } = prepareReplacementsForTransaction(\n\t\ta.replacements,\n\t\tb.replacements\n\t);\n\n\trichTextMap.doc?.transact( () => {\n\t\trichTextMap.get( 'xmlText' ).delete( stringDiff.index, stringDiff.remove );\n\t\trichTextMap.get( 'xmlText' ).insert( stringDiff.index, stringDiff.insert, nullifierFormat );\n\n\t\tconst yfa = gutenFormatsToYFormats( a.formats );\n\t\tconst yfb = gutenFormatsToYFormats( b.formats );\n\t\tconst formatsDiff = diff.simpleDiffArray( yfa, yfb, isEqual );\n\n\t\tif ( formatsDiff.remove ) {\n\t\t\tyfa.slice( formatsDiff.index, formatsDiff.index + formatsDiff.remove ).forEach( ( f ) => {\n\t\t\t\tconst tagName = Object.keys( f.format )[ 0 ];\n\t\t\t\trichTextMap.get( 'xmlText' ).format( f.index, f.length, { [ tagName ]: null } );\n\t\t\t} );\n\t\t}\n\t\tif ( formatsDiff.insert ) {\n\t\t\tformatsDiff.insert.forEach( ( f ) => richTextMap.get( 'xmlText' ).format( f.index, f.length, f.format ) );\n\t\t}\n\n\t\trichTextMap.get( 'replacements' ).delete( replacementsDiff.index, replacementsDiff.remove );\n\t\trichTextMap.get( 'replacements' ).insert( replacementsDiff.index, replacementsDiff.insert );\n\t\trichTextMap.set( 'multilineWrapperReplacements', multilineWrapperReplacements );\n\t} );\n}\n\n/**\n * Convert the RichText back from our Yjs representation to an HTML string.\n *\n * @param {import(\"yjs\").Map} richTextMap\n * @return {string}\n */\nexport function richTextMapToHTML( richTextMap ) {\n\tlet text = richTextMap.get( 'xmlText' ).toString();\n\n\t// Process multiline tags\n\tconst multilineTag = richTextMap.get( 'multilineTag' );\n\ttext = multilineTag\n\t\t? stringAsMultiline( text, multilineTag, richTextMap.get( 'multilineWrapperReplacements' ) )\n\t\t: text;\n\n\t// Process replacements (e.g. inline images)\n\trichTextMap.get( 'replacements' ).forEach( ( replacement ) => {\n\t\tconst replacementHTML = toHTMLString( {\n\t\t\tvalue: {\n\t\t\t\treplacements: [ replacement ],\n\t\t\t\tformats: Array( 1 ),\n\t\t\t\ttext: OBJECT_REPLACEMENT_CHARACTER,\n\t\t\t},\n\t\t} );\n\t\ttext = text.replace( OBJECT_REPLACEMENT_CHARACTER, replacementHTML );\n\t} );\n\n\treturn text;\n}\n\n/**\n * Get HTML replacements for each multiline wrapper tag replacement.\n *\n * @param {string} str\n * @param {Record<number, {type: string}[]>} replacements\n */\nfunction getMultilineWrapperTagHTMLReplacements( str, replacements ) {\n\tconst replacementsHTML = [];\n\tlet currentMultilineWrappers = [];\n\tlet foundLineSeparatorIndex = -1;\n\n\tdo {\n\t\tfoundLineSeparatorIndex = str.indexOf( __UNSTABLE_LINE_SEPARATOR, foundLineSeparatorIndex + 1 );\n\t\tconst multilineWrappers = replacements[ foundLineSeparatorIndex ] ?? [];\n\t\tconst d = diff.simpleDiffArray( currentMultilineWrappers, multilineWrappers, isEqual );\n\t\tlet html = '';\n\n\t\t// Closing multiline wrapper tags\n\t\tcurrentMultilineWrappers\n\t\t\t.slice( d.index, d.index + d.remove )\n\t\t\t.reverse()\n\t\t\t.forEach( ( multilineWrapper ) => {\n\t\t\t\thtml += `</${ multilineWrapper.type }></li>`;\n\t\t\t} );\n\n\t\t// Opening multiline wrapper tags\n\t\td.insert.forEach( ( multilineWrapper ) => {\n\t\t\thtml += `<${ multilineWrapper.type }>`;\n\t\t} );\n\n\t\treplacementsHTML.push( { isOpeningTag: !! d.insert.length, html } );\n\t\tcurrentMultilineWrappers = multilineWrappers;\n\t} while ( foundLineSeparatorIndex !== -1 );\n\n\treturn replacementsHTML;\n}\n\n/**\n * Wraps each line of a multiline string with the given tags.\n *\n * @param {string} str A multiline string delimited by __UNSTABLE_LINE_SEPARATOR.\n * @param {string} multilineTag The tag name to wrap each line with.\n * @param {Record<number, {type: string}[]>} replacements Multiline wrapper replacements.\n * @return {string} The string reconstructed with multiline considerations.\n */\nfunction stringAsMultiline( str, multilineTag, replacements ) {\n\tconst wrapperTagReplacements = getMultilineWrapperTagHTMLReplacements( str, replacements );\n\n\treturn str\n\t\t.split( __UNSTABLE_LINE_SEPARATOR )\n\t\t.map( ( line, i ) => {\n\t\t\tconst { isOpeningTag, html } = wrapperTagReplacements[ i ];\n\n\t\t\treturn isOpeningTag\n\t\t\t\t? `<${ multilineTag }>${ line }${ html }`\n\t\t\t\t: `<${ multilineTag }>${ line }</${ multilineTag }>${ html }`;\n\t\t} )\n\t\t.join( '' );\n}\n"],"mappings":"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"}