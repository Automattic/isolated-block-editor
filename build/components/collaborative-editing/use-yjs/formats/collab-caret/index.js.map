{"version":3,"file":"index.js","names":["FORMAT_NAME","applyCarets","record","multiline","carets","forEach","caret","start","end","id","color","label","isCollapsed","checkOffset","isAtMultilineItemEnd","multilineItemText","isShifted","isMultiline","text","length","lastGrapheme","Intl","Segmenter","segment","pop","undefined","offset","applyFormat","type","attributes","classnames","title","style","shouldUseWhiteText","join","getCarets","memoize","peers","richTextIdentifier","blockClientId","Object","entries","filter","peer","clientId","attributeKey","map","name","getMultilineData","multilineTag","attributeValue","multilineItems","create","html","split","__UNSTABLE_LINE_SEPARATOR","count","itemText","getStableBlockAttributeSelector","getBlockAttributes","settings","tagName","className","edit","__experimentalGetPropsForEditableTreePreparation","select","MULTILINE_ATTRIBUTES","values","blockName","getBlockName","getCollabPeers","blockAttributeSelector","__experimentalCreatePrepareEditableTree","formats","registerFormatCollabCaret","registerFormatType"],"sources":["../../../../../../src/components/collaborative-editing/use-yjs/formats/collab-caret/index.js"],"sourcesContent":["/**\n * External dependencies\n */\nimport memoize from 'memize';\nimport classnames from 'classnames';\n\n/**\n * WordPress dependencies\n */\nimport { applyFormat, create, registerFormatType, __UNSTABLE_LINE_SEPARATOR } from '@wordpress/rich-text';\n\n/**\n * Internal dependencies\n */\nimport { shouldUseWhiteText } from './color-utils';\nimport './style.scss';\n\n/**\n * @typedef MultilineData\n * @property {boolean} isMultiline - Whether this is a multiline attribute.\n * @property {(offset: number) => {isAtMultilineItemEnd: boolean, multilineItemText?: string}} checkOffset - Determine whether a given caret index is at the end of a multiline segment.\n */\n\nexport const FORMAT_NAME = 'isolated/collab-caret';\n\n/**\n * Applies given carets to the given record.\n *\n * @param {Object} record The record to apply carets to.\n * @param {MultilineData} multiline\n * @param {Array} carets The carets to apply.\n * @return {Object} A record with the carets applied.\n */\nexport function applyCarets( record, multiline, carets = [] ) {\n\tcarets.forEach( ( caret ) => {\n\t\tlet { start, end, id, color, label } = caret;\n\t\tconst isCollapsed = start === end;\n\t\tconst { isAtMultilineItemEnd, multilineItemText } = multiline.checkOffset( end );\n\t\tconst isShifted = isCollapsed && ( multiline.isMultiline ? isAtMultilineItemEnd : end >= record.text.length );\n\n\t\tconst text = isAtMultilineItemEnd ? multilineItemText : record.text;\n\n\t\t// Try to accurately get the `length` of the last character (i.e. grapheme) in case\n\t\t// the last character is an emoji, where \"<emoji>\".length can be more than 1.\n\t\t// For example, \"👩‍👩‍👧‍👦\".length === 11. (Intl.Segementer is still unsupported in Firefox)\n\t\t// @ts-ignore Intl.Segmenter is not in spec yet\n\t\tconst lastGrapheme = Intl.Segmenter\n\t\t\t? // @ts-ignore Intl.Segmenter is not in spec yet\n\t\t\t  [ ...new Intl.Segmenter().segment( text ) ].pop()?.segment\n\t\t\t: undefined;\n\t\tconst offset = lastGrapheme?.length ?? 1; // fall back to 1 if we can't accurately segment the last grapheme\n\n\t\tif ( isShifted ) {\n\t\t\tstart = end - offset;\n\t\t}\n\n\t\tif ( isCollapsed ) {\n\t\t\tend = start + offset;\n\t\t}\n\n\t\trecord = applyFormat(\n\t\t\trecord,\n\t\t\t{\n\t\t\t\ttype: FORMAT_NAME,\n\t\t\t\tattributes: {\n\t\t\t\t\tid: 'iso-editor-collab-caret-' + id,\n\t\t\t\t\tclass: classnames( {\n\t\t\t\t\t\t'is-collapsed': isCollapsed,\n\t\t\t\t\t\t'is-shifted': isShifted,\n\t\t\t\t\t} ),\n\t\t\t\t\ttitle: label,\n\t\t\t\t\tstyle: [\n\t\t\t\t\t\t`--iso-editor-collab-caret-color: ${ color || '#2e3d48' };`,\n\t\t\t\t\t\t`--iso-editor-collab-caret-label-text-color: ${\n\t\t\t\t\t\t\tshouldUseWhiteText( color ) ? '#fff' : '#1e1e1e'\n\t\t\t\t\t\t};`,\n\t\t\t\t\t].join( ' ' ),\n\t\t\t\t},\n\t\t\t},\n\t\t\tstart,\n\t\t\tend\n\t\t);\n\t} );\n\n\treturn record;\n}\n\nconst getCarets = memoize( ( peers, richTextIdentifier, blockClientId ) => {\n\treturn Object.entries( peers )\n\t\t.filter( ( [ , peer ] ) => {\n\t\t\treturn (\n\t\t\t\tpeer?.start?.clientId === blockClientId &&\n\t\t\t\tpeer?.end?.clientId === blockClientId &&\n\t\t\t\tpeer.start.attributeKey === richTextIdentifier\n\t\t\t);\n\t\t} )\n\t\t.map( ( [ id, peer ] ) => ( {\n\t\t\tid,\n\t\t\tlabel: peer.name,\n\t\t\tstart: peer.start.offset,\n\t\t\tend: peer.end.offset,\n\t\t\tcolor: peer.color,\n\t\t} ) );\n} );\n\n/**\n * @param {string} multilineTag\n * @param {string} attributeValue\n * @return {MultilineData}\n */\nconst getMultilineData = ( multilineTag, attributeValue ) => {\n\tconst multilineItems = multilineTag\n\t\t? create( { html: attributeValue, multilineTag } )?.text?.split?.( __UNSTABLE_LINE_SEPARATOR )\n\t\t: [];\n\n\treturn {\n\t\tisMultiline: !! multilineTag,\n\t\tcheckOffset: ( offset ) => {\n\t\t\tlet count = 0;\n\t\t\tfor ( const itemText of multilineItems ) {\n\t\t\t\tcount += itemText.length;\n\t\t\t\tif ( offset === count ) {\n\t\t\t\t\treturn { isAtMultilineItemEnd: true, multilineItemText: itemText };\n\t\t\t\t}\n\t\t\t\tcount += 1; // line separator character\n\t\t\t}\n\t\t\treturn { isAtMultilineItemEnd: false };\n\t\t},\n\t};\n};\n\nconst getStableBlockAttributeSelector = memoize( ( getBlockAttributes, blockClientId, attributeKey ) => () =>\n\tgetBlockAttributes( blockClientId )[ attributeKey ]\n);\n\nexport const settings = {\n\ttitle: 'Collaboration peer caret',\n\ttagName: 'mark',\n\tclassName: 'iso-editor-collab-caret',\n\tattributes: {\n\t\tid: 'id',\n\t\tclassName: 'class',\n\t},\n\tedit() {\n\t\treturn null;\n\t},\n\t__experimentalGetPropsForEditableTreePreparation( select, { richTextIdentifier, blockClientId } ) {\n\t\t// Adds special handling for certain block attributes that are known to be multiline,\n\t\t// e.g. the `values` attribute of the List block.\n\t\tconst MULTILINE_ATTRIBUTES = {\n\t\t\t'core/list': { values: { multilineTag: 'li' } },\n\t\t};\n\n\t\tconst blockName = select( 'core/block-editor' ).getBlockName( blockClientId );\n\t\tconst multilineTag = MULTILINE_ATTRIBUTES[ blockName ]?.[ richTextIdentifier ]?.multilineTag;\n\n\t\t// The properties in this return object need to be as stable as possible.\n\t\t// See https://github.com/WordPress/gutenberg/issues/23428\n\t\treturn {\n\t\t\tcarets: getCarets( select( 'isolated/editor' ).getCollabPeers(), richTextIdentifier, blockClientId ),\n\t\t\tmultilineTag,\n\t\t\tblockAttributeSelector: getStableBlockAttributeSelector(\n\t\t\t\tselect( 'core/block-editor' ).getBlockAttributes,\n\t\t\t\tblockClientId,\n\t\t\t\trichTextIdentifier\n\t\t\t),\n\t\t};\n\t},\n\t__experimentalCreatePrepareEditableTree( { carets, multilineTag, blockAttributeSelector } ) {\n\t\treturn ( formats, text ) => {\n\t\t\tif ( ! carets?.length ) {\n\t\t\t\treturn formats;\n\t\t\t}\n\n\t\t\tconst multiline = getMultilineData( multilineTag, blockAttributeSelector() );\n\t\t\tconst record = applyCarets( { formats, text }, multiline, carets );\n\n\t\t\treturn record.formats;\n\t\t};\n\t},\n};\n\nexport const registerFormatCollabCaret = () => {\n\tregisterFormatType( FORMAT_NAME, settings );\n};\n"],"mappings":"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"}